{
  "address": "0x00Bfa047eC1c5e849779107900AfD948eFCA8e63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITokenGovernance",
          "name": "initBNTGovernance",
          "type": "address"
        },
        {
          "internalType": "contract ITokenGovernance",
          "name": "initVBNTGovernance",
          "type": "address"
        },
        {
          "internalType": "contract INetworkSettings",
          "name": "initNetworkSettings",
          "type": "address"
        },
        {
          "internalType": "contract IMasterVault",
          "name": "initMasterVault",
          "type": "address"
        },
        {
          "internalType": "contract IExternalProtectionVault",
          "name": "initExternalProtectionVault",
          "type": "address"
        },
        {
          "internalType": "contract IPoolToken",
          "name": "initBNTPoolToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFlashLoanReturn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolCollection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTokenAmountMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitUnsupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "prevPoolCollection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "newPoolCollection",
          "type": "address"
        }
      ],
      "name": "LatestPoolCollectionReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NetworkFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "PoolCollectionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "PoolCollectionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "PoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bntFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "TokensTraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "addPoolCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "collectionByPool",
      "outputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        },
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        },
        {
          "internalType": "contract Token[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "createPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositForPermitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositPermitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolToken",
          "name": "poolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "initWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolToken",
          "name": "poolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "initWithdrawalPermitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBNTPool",
          "name": "initBNTPool",
          "type": "address"
        },
        {
          "internalType": "contract IPendingWithdrawals",
          "name": "initPendingWithdrawals",
          "type": "address"
        },
        {
          "internalType": "contract IPoolMigrator",
          "name": "initPoolMigrator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isPoolValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "poolType",
          "type": "uint16"
        }
      ],
      "name": "latestPoolCollection",
      "outputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPools",
      "outputs": [
        {
          "internalType": "contract Token[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalAmount",
          "type": "uint256"
        }
      ],
      "name": "migrateLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "migratePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingNetworkFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCollections",
      "outputs": [
        {
          "internalType": "contract IPoolCollection[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        },
        {
          "internalType": "contract IPoolCollection",
          "name": "newLatestPoolCollection",
          "type": "address"
        }
      ],
      "name": "removePoolCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleEmergencyStopper",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleMigrationManager",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleNetworkFeeManager",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolCollection",
          "name": "poolCollection",
          "type": "address"
        }
      ],
      "name": "setLatestPoolCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "tradeBySourceAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "tradeBySourceAmountPermitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "tradeByTargetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Token",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "tradeByTargetAmountPermitted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawNetworkFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b1730043826e4a010fd96345cf5ae97211d947004d049cb004b9cb4e835171a",
  "receipt": {
    "to": null,
    "from": "0x5bEBA4D3533a963Dedb270a95ae5f7752fA0Fe22",
    "contractAddress": "0x00Bfa047eC1c5e849779107900AfD948eFCA8e63",
    "transactionIndex": 156,
    "gasUsed": "5184225",
    "logsBloom": "0x
    "blockHash": "0x91365c65c48c60f47a5648129ab8b59e1dcfc5f13470ccfa98a3212dd1672a6f",
    "transactionHash": "0x6b1730043826e4a010fd96345cf5ae97211d947004d049cb004b9cb4e835171a",
    "logs": [],
    "blockNumber": 14830515,
    "cumulativeGasUsed": "12224579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa489C2b5b36835A327851Ab917A80562B5AFC244",
    "0x0887ae1251E180d7D453aeDEBee26e1639f20113",
    "0x83E1814ba31F7ea95D216204BB45FE75Ce09b14F",
    "0x649765821D9f64198c905eC0B2B037a4a52Bc373",
    "0xFd31662b3d54eddE9B6Bdd32c9c27C8E292cAD57",
    "0xAB05Cf7C6c3a288cd36326e4f7b8600e7268E344"
  ],
  "numDeployments": 3,
  "solcInputHash": "9578fd8607a4510b6c94f9286634e821",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenGovernance\",\"name\":\"initBNTGovernance\",\"type\":\"address\"},{\"internalType\":\"contract ITokenGovernance\",\"name\":\"initVBNTGovernance\",\"type\":\"address\"},{\"internalType\":\"contract INetworkSettings\",\"name\":\"initNetworkSettings\",\"type\":\"address\"},{\"internalType\":\"contract IMasterVault\",\"name\":\"initMasterVault\",\"type\":\"address\"},{\"internalType\":\"contract IExternalProtectionVault\",\"name\":\"initExternalProtectionVault\",\"type\":\"address\"},{\"internalType\":\"contract IPoolToken\",\"name\":\"initBNTPoolToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFlashLoanReturn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenAmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitUnsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoanCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"FundsMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"prevPoolCollection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"newPoolCollection\",\"type\":\"address\"}],\"name\":\"LatestPoolCollectionReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NetworkFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"PoolCollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"PoolCollectionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bntFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"TokensTraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"addPoolCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectionByPool\",\"outputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"},{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"},{\"internalType\":\"contract Token[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"createPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositForPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"initWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolToken\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"initWithdrawalPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBNTPool\",\"name\":\"initBNTPool\",\"type\":\"address\"},{\"internalType\":\"contract IPendingWithdrawals\",\"name\":\"initPendingWithdrawals\",\"type\":\"address\"},{\"internalType\":\"contract IPoolMigrator\",\"name\":\"initPoolMigrator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolType\",\"type\":\"uint16\"}],\"name\":\"latestPoolCollection\",\"outputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"migrateLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"migratePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingNetworkFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCollections\",\"outputs\":[{\"internalType\":\"contract IPoolCollection[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"},{\"internalType\":\"contract IPoolCollection\",\"name\":\"newLatestPoolCollection\",\"type\":\"address\"}],\"name\":\"removePoolCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleEmergencyStopper\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleMigrationManager\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleNetworkFeeManager\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolCollection\",\"name\":\"poolCollection\",\"type\":\"address\"}],\"name\":\"setLatestPoolCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"tradeBySourceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeBySourceAmountPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"tradeByTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeByTargetAmountPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawNetworkFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Bancor Network contract\",\"events\":{\"FlashLoanCompleted(address,address,uint256,uint256)\":{\"details\":\"triggered when a flash-loan is completed\"},\"FundsMigrated(bytes32,address,address,uint256,uint256,uint256)\":{\"details\":\"triggered when funds are migrated\"},\"LatestPoolCollectionReplaced(uint16,address,address)\":{\"details\":\"triggered when the latest pool collection, for a specific type, is replaced\"},\"NetworkFeesWithdrawn(address,address,uint256)\":{\"details\":\"triggered when network fees are withdrawn\"},\"PoolAdded(address,address)\":{\"details\":\"triggered when a new pool is added to a pool collection\"},\"PoolCollectionAdded(uint16,address)\":{\"details\":\"triggered when a new pool collection is added\"},\"PoolCollectionRemoved(uint16,address)\":{\"details\":\"triggered when an existing pool collection is removed\"},\"PoolCreated(address,address)\":{\"details\":\"triggered when a pool is created\"},\"PoolRemoved(address,address)\":{\"details\":\"triggered when a new pool is removed from a pool collection\"},\"TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"triggered on a successful trade\"}},\"kind\":\"dev\",\"methods\":{\"addPoolCollection(address)\":{\"details\":\"adds new pool collection to the network requirements: - the caller must be the admin of the contract\"},\"cancelWithdrawal(uint256)\":{\"details\":\"cancels a withdrawal request, and returns the number of pool token amount associated with the withdrawal request requirements: - the caller must have already initiated a withdrawal and received the specified id\"},\"collectionByPool(address)\":{\"details\":\"returns the respective pool collection for the provided pool\"},\"constructor\":{\"details\":\"a \\\"virtual\\\" constructor that is only used to set immutable state variables\"},\"createPool(uint16,address)\":{\"details\":\"creates a new pool requirements: - the pool doesn't already exist\"},\"createPools(uint16,address[])\":{\"details\":\"creates new pools requirements: - none of the pools already exists\"},\"deposit(address,uint256)\":{\"details\":\"deposits liquidity for the current provider and returns the respective pool token amount requirements: - the caller must have approved the network to transfer the tokens on its behalf (except for in the   native token case)\"},\"depositFor(address,address,uint256)\":{\"details\":\"deposits liquidity for the specified provider and returns the respective pool token amount requirements: - the caller must have approved the network to transfer the tokens on its behalf (except for in the   native token case)\"},\"depositForPermitted(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit request and returns the respective pool token amount requirements: - the caller must have provided a valid and unused EIP712 typed signature\"},\"depositPermitted(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"deposits liquidity by providing an EIP712 typed signature for an EIP2612 permit request and returns the respective pool token amount requirements: - the caller must have provided a valid and unused EIP712 typed signature\"},\"flashLoan(address,uint256,address,bytes)\":{\"details\":\"provides a flash-loan requirements: - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initWithdrawal(address,uint256)\":{\"details\":\"initiates liquidity withdrawal requirements: - the caller must have approved the contract to transfer the pool token amount on its behalf\"},\"initWithdrawalPermitted(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"initiates liquidity withdrawal by providing an EIP712 typed signature for an EIP2612 permit request requirements: - the caller must have provided a valid and unused EIP712 typed signature\"},\"initialize(address,address,address)\":{\"details\":\"fully initializes the contract and its parents\"},\"isPaused()\":{\"details\":\"returns whether the network is currently paused\"},\"isPoolValid(address)\":{\"details\":\"returns whether the pool is valid\"},\"latestPoolCollection(uint16)\":{\"details\":\"returns the most recent collection that was added to the pool collections set for a specific type\"},\"liquidityPools()\":{\"details\":\"returns the set of all liquidity pools\"},\"migrateLiquidity(address,address,uint256,uint256,uint256)\":{\"details\":\"deposits liquidity during a migration\"},\"migratePools(address[])\":{\"details\":\"migrates a list of pools between pool collections notes: - invalid or incompatible pools will be skipped gracefully\"},\"pause()\":{\"details\":\"pauses the network requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingNetworkFeeAmount()\":{\"details\":\"returns the pending network fee amount to be burned by the vortex\"},\"poolCollections()\":{\"details\":\"returns the set of all valid pool collections\"},\"postUpgrade(bytes)\":{\"details\":\"performs post-upgrade initialization requirements: - this must can be called only once per-upgrade\"},\"removePoolCollection(address,address)\":{\"details\":\"removes an existing pool collection from the pool requirements: - the caller must be the admin of the contract\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"resume()\":{\"details\":\"resumes the network requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"roleEmergencyStopper()\":{\"details\":\"returns the emergency stopper role\"},\"roleMigrationManager()\":{\"details\":\"returns the migration manager role\"},\"roleNetworkFeeManager()\":{\"details\":\"returns the network fee manager role\"},\"setLatestPoolCollection(address)\":{\"details\":\"sets the new latest pool collection for the given type requirements: - the caller must be the admin of the contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tradeBySourceAmount(address,address,uint256,uint256,uint256,address)\":{\"details\":\"performs a trade by providing the input source amount, and returns the trade target amount requirements: - the caller must have approved the network to transfer the source tokens on its behalf (except for in the   native token case)\"},\"tradeBySourceAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"performs a trade by providing the input source amount and providing an EIP712 typed signature for an EIP2612 permit request, and returns the trade target amount requirements: - the caller must have provided a valid and unused EIP712 typed signature\"},\"tradeByTargetAmount(address,address,uint256,uint256,uint256,address)\":{\"details\":\"performs a trade by providing the output target amount, and returns the trade source amount requirements: - the caller must have approved the network to transfer the source tokens on its behalf (except for in the   native token case)\"},\"tradeByTargetAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"performs a trade by providing the output target amount and providing an EIP712 typed signature for an EIP2612 permit request and returns the target amount and fee, and returns the trade source amount requirements: - the caller must have provided a valid and unused EIP712 typed signature\"},\"withdraw(uint256)\":{\"details\":\"withdraws liquidity and returns the withdrawn amount requirements: - the provider must have already initiated a withdrawal and received the specified id - the specified withdrawal request is eligible for completion - the provider must have approved the network to transfer vBNT amount on its behalf, when withdrawing BNT liquidity\"},\"withdrawNetworkFees(address)\":{\"details\":\"withdraws pending network fees, and returns the amount of fees withdrawn requirements: - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/network/BancorNetwork.sol\":\"BancorNetwork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@bancor/token-governance/contracts/IClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n/// @title Claimable contract interface\\ninterface IClaimable {\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x52c14ec7eac845d8ca8b3acb46bdf913e6ede14f4e8887f61dc35f93399e2962\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IClaimable.sol\\\";\\n\\n/// @title Mintable Token interface\\ninterface IMintableToken is IERC20, IClaimable {\\n    function issue(address to, uint256 amount) external;\\n\\n    function destroy(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x87ddb17ba18575515a97f615a84225bdb1fdf756eeae626287b94b2a3517a93b\",\"license\":\"MIT\"},\"@bancor/token-governance/contracts/ITokenGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IMintableToken.sol\\\";\\n\\n/// @title The interface for mintable/burnable token governance.\\ninterface ITokenGovernance {\\n    // The address of the mintable ERC20 token.\\n    function token() external view returns (IMintableToken);\\n\\n    /// @dev Mints new tokens.\\n    ///\\n    /// @param to Account to receive the new amount.\\n    /// @param amount Amount to increase the supply by.\\n    ///\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @dev Burns tokens from the caller.\\n    ///\\n    /// @param amount Amount to decrease the supply by.\\n    ///\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xebcf7997ed758d71a551597c3f7874b2b2fd91a72bbe50c634b02506f04e95b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/network/BancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { EnumerableSetUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport { ITokenGovernance } from \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { Time } from \\\"../utility/Time.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    Utils,\\n    AlreadyExists,\\n    DoesNotExist,\\n    InvalidToken,\\n    InvalidType,\\n    InvalidPoolCollection,\\n    NotEmpty\\n} from \\\"../utility/Utils.sol\\\";\\n\\nimport { ROLE_ASSET_MANAGER } from \\\"../vaults/interfaces/IVault.sol\\\";\\nimport { IMasterVault } from \\\"../vaults/interfaces/IMasterVault.sol\\\";\\nimport { IExternalProtectionVault } from \\\"../vaults/interfaces/IExternalProtectionVault.sol\\\";\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { TokenLibrary, Signature } from \\\"../token/TokenLibrary.sol\\\";\\n\\nimport { IPoolCollection, TradeAmountAndFee } from \\\"../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolMigrator } from \\\"../pools/interfaces/IPoolMigrator.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    IBNTPool,\\n    ROLE_BNT_MANAGER,\\n    ROLE_VAULT_MANAGER,\\n    ROLE_FUNDING_MANAGER\\n} from \\\"../pools/interfaces/IBNTPool.sol\\\";\\n\\nimport { IPoolToken } from \\\"../pools/interfaces/IPoolToken.sol\\\";\\n\\nimport { INetworkSettings, NotWhitelisted } from \\\"./interfaces/INetworkSettings.sol\\\";\\nimport { IPendingWithdrawals, WithdrawalRequest, CompletedWithdrawal } from \\\"./interfaces/IPendingWithdrawals.sol\\\";\\nimport { IBancorNetwork, IFlashLoanRecipient } from \\\"./interfaces/IBancorNetwork.sol\\\";\\n\\n/**\\n * @dev Bancor Network contract\\n */\\ncontract BancorNetwork is IBancorNetwork, Upgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, Time, Utils {\\n    using Address for address payable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using TokenLibrary for Token;\\n    using SafeERC20 for IPoolToken;\\n\\n    error DeadlineExpired();\\n    error NativeTokenAmountMismatch();\\n    error InsufficientFlashLoanReturn();\\n\\n    struct TradeParams {\\n        uint256 amount;\\n        uint256 limit;\\n        bool bySourceAmount;\\n    }\\n\\n    struct TradeResult {\\n        uint256 sourceAmount;\\n        uint256 targetAmount;\\n        uint256 tradingFeeAmount;\\n        uint256 networkFeeAmount;\\n    }\\n\\n    struct TradeTokens {\\n        Token sourceToken;\\n        Token targetToken;\\n    }\\n\\n    struct TraderInfo {\\n        address trader;\\n        address beneficiary;\\n    }\\n\\n    // the migration manager role is required for migrating liquidity\\n    bytes32 private constant ROLE_MIGRATION_MANAGER = keccak256(\\\"ROLE_MIGRATION_MANAGER\\\");\\n\\n    // the emergency manager role is required to pause/unpause the network\\n    bytes32 private constant ROLE_EMERGENCY_STOPPER = keccak256(\\\"ROLE_EMERGENCY_STOPPER\\\");\\n\\n    // the network fee manager role is required to pull the accumulated pending network fees\\n    bytes32 private constant ROLE_NETWORK_FEE_MANAGER = keccak256(\\\"ROLE_NETWORK_FEE_MANAGER\\\");\\n\\n    // the address of the BNT token\\n    IERC20 private immutable _bnt;\\n\\n    // the address of the BNT token governance\\n    ITokenGovernance private immutable _bntGovernance;\\n\\n    // the address of the vBNT token\\n    IERC20 private immutable _vbnt;\\n\\n    // the address of the vBNT token governance\\n    ITokenGovernance private immutable _vbntGovernance;\\n\\n    // the network settings contract\\n    INetworkSettings private immutable _networkSettings;\\n\\n    // the master vault contract\\n    IMasterVault private immutable _masterVault;\\n\\n    // the address of the external protection vault\\n    IExternalProtectionVault private immutable _externalProtectionVault;\\n\\n    // the BNT pool token\\n    IPoolToken internal immutable _bntPoolToken;\\n\\n    // the BNT pool contract\\n    IBNTPool internal _bntPool;\\n\\n    // the pending withdrawals contract\\n    IPendingWithdrawals internal _pendingWithdrawals;\\n\\n    // the pool migrator contract\\n    IPoolMigrator internal _poolMigrator;\\n\\n    // the set of all valid pool collections\\n    EnumerableSetUpgradeable.AddressSet private _poolCollections;\\n\\n    // a mapping between the last pool collection that was added to the pool collections set and its type\\n    mapping(uint16 => IPoolCollection) private _latestPoolCollections;\\n\\n    // the set of all pools\\n    EnumerableSetUpgradeable.AddressSet private _liquidityPools;\\n\\n    // a mapping between pools and their respective pool collections\\n    mapping(Token => IPoolCollection) private _collectionByPool;\\n\\n    // the pending network fee amount to be burned by the vortex\\n    uint256 internal _pendingNetworkFeeAmount;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 10] private __gap;\\n\\n    /**\\n     * @dev triggered when a new pool collection is added\\n     */\\n    event PoolCollectionAdded(uint16 indexed poolType, IPoolCollection indexed poolCollection);\\n\\n    /**\\n     * @dev triggered when an existing pool collection is removed\\n     */\\n    event PoolCollectionRemoved(uint16 indexed poolType, IPoolCollection indexed poolCollection);\\n\\n    /**\\n     * @dev triggered when the latest pool collection, for a specific type, is replaced\\n     */\\n    event LatestPoolCollectionReplaced(\\n        uint16 indexed poolType,\\n        IPoolCollection indexed prevPoolCollection,\\n        IPoolCollection indexed newPoolCollection\\n    );\\n\\n    /**\\n     * @dev triggered when a pool is created\\n     */\\n    event PoolCreated(Token indexed pool, IPoolCollection indexed poolCollection);\\n\\n    /**\\n     * @dev triggered when a new pool is added to a pool collection\\n     */\\n    event PoolAdded(Token indexed pool, IPoolCollection indexed poolCollection);\\n\\n    /**\\n     * @dev triggered when a new pool is removed from a pool collection\\n     */\\n    event PoolRemoved(Token indexed pool, IPoolCollection indexed poolCollection);\\n\\n    /**\\n     * @dev triggered when funds are migrated\\n     */\\n    event FundsMigrated(\\n        bytes32 indexed contextId,\\n        Token indexed token,\\n        address indexed provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    );\\n\\n    /**\\n     * @dev triggered on a successful trade\\n     */\\n    event TokensTraded(\\n        bytes32 indexed contextId,\\n        Token indexed sourceToken,\\n        Token indexed targetToken,\\n        uint256 sourceAmount,\\n        uint256 targetAmount,\\n        uint256 bntAmount,\\n        uint256 targetFeeAmount,\\n        uint256 bntFeeAmount,\\n        address trader\\n    );\\n\\n    /**\\n     * @dev triggered when a flash-loan is completed\\n     */\\n    event FlashLoanCompleted(Token indexed token, address indexed borrower, uint256 amount, uint256 feeAmount);\\n\\n    /**\\n     * @dev triggered when network fees are withdrawn\\n     */\\n    event NetworkFeesWithdrawn(address indexed caller, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @dev a \\\"virtual\\\" constructor that is only used to set immutable state variables\\n     */\\n    constructor(\\n        ITokenGovernance initBNTGovernance,\\n        ITokenGovernance initVBNTGovernance,\\n        INetworkSettings initNetworkSettings,\\n        IMasterVault initMasterVault,\\n        IExternalProtectionVault initExternalProtectionVault,\\n        IPoolToken initBNTPoolToken\\n    )\\n        validAddress(address(initBNTGovernance))\\n        validAddress(address(initVBNTGovernance))\\n        validAddress(address(initNetworkSettings))\\n        validAddress(address(initMasterVault))\\n        validAddress(address(initExternalProtectionVault))\\n        validAddress(address(initBNTPoolToken))\\n    {\\n        _bntGovernance = initBNTGovernance;\\n        _bnt = initBNTGovernance.token();\\n        _vbntGovernance = initVBNTGovernance;\\n        _vbnt = initVBNTGovernance.token();\\n\\n        _networkSettings = initNetworkSettings;\\n        _masterVault = initMasterVault;\\n        _externalProtectionVault = initExternalProtectionVault;\\n        _bntPoolToken = initBNTPoolToken;\\n    }\\n\\n    /**\\n     * @dev fully initializes the contract and its parents\\n     */\\n    function initialize(\\n        IBNTPool initBNTPool,\\n        IPendingWithdrawals initPendingWithdrawals,\\n        IPoolMigrator initPoolMigrator\\n    )\\n        external\\n        validAddress(address(initBNTPool))\\n        validAddress(address(initPendingWithdrawals))\\n        validAddress(address(initPoolMigrator))\\n        initializer\\n    {\\n        __BancorNetwork_init(initBNTPool, initPendingWithdrawals, initPoolMigrator);\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __BancorNetwork_init(\\n        IBNTPool initBNTPool,\\n        IPendingWithdrawals initPendingWithdrawals,\\n        IPoolMigrator initPoolMigrator\\n    ) internal onlyInitializing {\\n        __Upgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        __BancorNetwork_init_unchained(initBNTPool, initPendingWithdrawals, initPoolMigrator);\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __BancorNetwork_init_unchained(\\n        IBNTPool initBNTPool,\\n        IPendingWithdrawals initPendingWithdrawals,\\n        IPoolMigrator initPoolMigrator\\n    ) internal onlyInitializing {\\n        _bntPool = initBNTPool;\\n        _pendingWithdrawals = initPendingWithdrawals;\\n        _poolMigrator = initPoolMigrator;\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_MIGRATION_MANAGER, ROLE_ADMIN);\\n        _setRoleAdmin(ROLE_EMERGENCY_STOPPER, ROLE_ADMIN);\\n        _setRoleAdmin(ROLE_NETWORK_FEE_MANAGER, ROLE_ADMIN);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @inheritdoc Upgradeable\\n     */\\n    function version() public pure override(IVersioned, Upgradeable) returns (uint16) {\\n        return 4;\\n    }\\n\\n    /**\\n     * @dev returns the migration manager role\\n     */\\n    function roleMigrationManager() external pure returns (bytes32) {\\n        return ROLE_MIGRATION_MANAGER;\\n    }\\n\\n    /**\\n     * @dev returns the emergency stopper role\\n     */\\n    function roleEmergencyStopper() external pure returns (bytes32) {\\n        return ROLE_EMERGENCY_STOPPER;\\n    }\\n\\n    /**\\n     * @dev returns the network fee manager role\\n     */\\n    function roleNetworkFeeManager() external pure returns (bytes32) {\\n        return ROLE_NETWORK_FEE_MANAGER;\\n    }\\n\\n    /**\\n     * @dev returns the pending network fee amount to be burned by the vortex\\n     */\\n    function pendingNetworkFeeAmount() external view returns (uint256) {\\n        return _pendingNetworkFeeAmount;\\n    }\\n\\n    /**\\n     * @dev adds new pool collection to the network\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function addPoolCollection(IPoolCollection poolCollection)\\n        external\\n        validAddress(address(poolCollection))\\n        onlyAdmin\\n        nonReentrant\\n    {\\n        if (!_poolCollections.add(address(poolCollection))) {\\n            revert AlreadyExists();\\n        }\\n\\n        // ensure that we're not adding a pool collection with the same type and version\\n        uint16 poolType = poolCollection.poolType();\\n        IPoolCollection prevLatestPoolCollection = _latestPoolCollections[poolType];\\n        if (\\n            address(prevLatestPoolCollection) != address(0) &&\\n            prevLatestPoolCollection.version() == poolCollection.version()\\n        ) {\\n            revert AlreadyExists();\\n        }\\n\\n        _setLatestPoolCollection(poolType, poolCollection);\\n        _setAccessRoles(poolCollection, true);\\n\\n        emit PoolCollectionAdded({ poolType: poolType, poolCollection: poolCollection });\\n    }\\n\\n    /**\\n     * @dev removes an existing pool collection from the pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function removePoolCollection(IPoolCollection poolCollection, IPoolCollection newLatestPoolCollection)\\n        external\\n        validAddress(address(poolCollection))\\n        onlyAdmin\\n        nonReentrant\\n    {\\n        if (poolCollection == newLatestPoolCollection) {\\n            revert InvalidPoolCollection();\\n        }\\n\\n        // verify that a pool collection is a valid latest pool collection (e.g., it either exists or a reset to zero)\\n        _verifyLatestPoolCollectionCandidate(newLatestPoolCollection);\\n\\n        // verify that no pools are associated with the specified pool collection\\n        if (poolCollection.poolCount() != 0) {\\n            revert NotEmpty();\\n        }\\n\\n        if (!_poolCollections.remove(address(poolCollection))) {\\n            revert DoesNotExist();\\n        }\\n\\n        uint16 poolType = poolCollection.poolType();\\n        if (address(newLatestPoolCollection) != address(0)) {\\n            uint16 newLatestPoolCollectionType = newLatestPoolCollection.poolType();\\n            if (poolType != newLatestPoolCollectionType) {\\n                revert InvalidType();\\n            }\\n        }\\n\\n        _setLatestPoolCollection(poolType, newLatestPoolCollection);\\n        _setAccessRoles(poolCollection, false);\\n\\n        emit PoolCollectionRemoved({ poolType: poolType, poolCollection: poolCollection });\\n    }\\n\\n    /**\\n     * @dev sets the new latest pool collection for the given type\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setLatestPoolCollection(IPoolCollection poolCollection)\\n        external\\n        validAddress(address(poolCollection))\\n        onlyAdmin\\n        nonReentrant\\n    {\\n        _verifyLatestPoolCollectionCandidate(poolCollection);\\n\\n        _setLatestPoolCollection(poolCollection.poolType(), poolCollection);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory) {\\n        uint256 length = _poolCollections.length();\\n        IPoolCollection[] memory list = new IPoolCollection[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            list[i] = IPoolCollection(_poolCollections.at(i));\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function latestPoolCollection(uint16 poolType) external view returns (IPoolCollection) {\\n        return _latestPoolCollections[poolType];\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function liquidityPools() external view returns (Token[] memory) {\\n        uint256 length = _liquidityPools.length();\\n        Token[] memory list = new Token[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            list[i] = Token(_liquidityPools.at(i));\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection) {\\n        return _collectionByPool[pool];\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function isPoolValid(Token pool) external view returns (bool) {\\n        return address(pool) == address(_bnt) || _liquidityPools.contains(address(pool));\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function createPool(uint16 poolType, Token token) external onlyAdmin nonReentrant {\\n        _createPool(poolType, token);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function createPools(uint16 poolType, Token[] calldata tokens) external onlyAdmin nonReentrant {\\n        uint256 length = tokens.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _createPool(poolType, tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev creates a new pool\\n     */\\n    function _createPool(uint16 poolType, Token token) private validAddress(address(token)) {\\n        if (token.isEqual(_bnt)) {\\n            revert InvalidToken();\\n        }\\n\\n        if (!_liquidityPools.add(address(token))) {\\n            revert AlreadyExists();\\n        }\\n\\n        // get the latest pool collection, corresponding to the requested type of the new pool, and use it to create the\\n        // pool\\n        IPoolCollection poolCollection = _latestPoolCollections[poolType];\\n        if (address(poolCollection) == address(0)) {\\n            revert InvalidType();\\n        }\\n\\n        // this is where the magic happens...\\n        poolCollection.createPool(token);\\n\\n        // add the pool collection to the reverse pool collection lookup\\n        _collectionByPool[token] = poolCollection;\\n\\n        emit PoolCreated({ pool: token, poolCollection: poolCollection });\\n        emit PoolAdded({ pool: token, poolCollection: poolCollection });\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function migratePools(Token[] calldata pools) external nonReentrant {\\n        uint256 length = pools.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            Token pool = pools[i];\\n\\n            // request the pool migrator to migrate the pool and get the new pool collection it exists in\\n            IPoolCollection newPoolCollection = _poolMigrator.migratePool(pool);\\n            IPoolCollection prevPoolCollection = _collectionByPool[pool];\\n\\n            // update the mapping between pools and their respective pool collections\\n            _collectionByPool[pool] = newPoolCollection;\\n\\n            emit PoolRemoved(pool, prevPoolCollection);\\n            emit PoolAdded(pool, newPoolCollection);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    )\\n        external\\n        payable\\n        validAddress(provider)\\n        validAddress(address(pool))\\n        greaterThanZero(tokenAmount)\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return _depositFor(provider, pool, tokenAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function deposit(Token pool, uint256 tokenAmount)\\n        external\\n        payable\\n        validAddress(address(pool))\\n        greaterThanZero(tokenAmount)\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return _depositFor(msg.sender, pool, tokenAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function depositForPermitted(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        validAddress(provider)\\n        validAddress(address(pool))\\n        greaterThanZero(tokenAmount)\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return _depositBaseTokenForPermitted(provider, pool, tokenAmount, deadline, Signature({ v: v, r: r, s: s }));\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function depositPermitted(\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external validAddress(address(pool)) greaterThanZero(tokenAmount) whenNotPaused nonReentrant returns (uint256) {\\n        return _depositBaseTokenForPermitted(msg.sender, pool, tokenAmount, deadline, Signature({ v: v, r: r, s: s }));\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount)\\n        external\\n        validAddress(address(poolToken))\\n        greaterThanZero(poolTokenAmount)\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        return _initWithdrawal(msg.sender, poolToken, poolTokenAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function initWithdrawalPermitted(\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        validAddress(address(poolToken))\\n        greaterThanZero(poolTokenAmount)\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        Token(address(poolToken)).permit(\\n            msg.sender,\\n            address(this),\\n            poolTokenAmount,\\n            deadline,\\n            Signature({ v: v, r: r, s: s })\\n        );\\n\\n        return _initWithdrawal(msg.sender, poolToken, poolTokenAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function cancelWithdrawal(uint256 id) external whenNotPaused nonReentrant returns (uint256) {\\n        return _pendingWithdrawals.cancelWithdrawal(msg.sender, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function withdraw(uint256 id) external whenNotPaused nonReentrant returns (uint256) {\\n        address provider = msg.sender;\\n        bytes32 contextId = _withdrawContextId(id, provider);\\n\\n        // complete the withdrawal and claim the locked pool tokens\\n        CompletedWithdrawal memory completedRequest = _pendingWithdrawals.completeWithdrawal(contextId, provider, id);\\n\\n        if (completedRequest.poolToken == _bntPoolToken) {\\n            return _withdrawBNT(contextId, provider, completedRequest);\\n        }\\n\\n        return _withdrawBaseToken(contextId, provider, completedRequest);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        _verifyTradeParams(sourceToken, targetToken, sourceAmount, minReturnAmount, deadline);\\n\\n        return\\n            _trade(\\n                TradeTokens({ sourceToken: sourceToken, targetToken: targetToken }),\\n                TradeParams({ bySourceAmount: true, amount: sourceAmount, limit: minReturnAmount }),\\n                TraderInfo({ trader: msg.sender, beneficiary: beneficiary }),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function tradeBySourceAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused nonReentrant returns (uint256) {\\n        _verifyTradeParams(sourceToken, targetToken, sourceAmount, minReturnAmount, deadline);\\n\\n        sourceToken.permit(msg.sender, address(this), sourceAmount, deadline, Signature({ v: v, r: r, s: s }));\\n\\n        return\\n            _trade(\\n                TradeTokens({ sourceToken: sourceToken, targetToken: targetToken }),\\n                TradeParams({ bySourceAmount: true, amount: sourceAmount, limit: minReturnAmount }),\\n                TraderInfo({ trader: msg.sender, beneficiary: beneficiary }),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        _verifyTradeParams(sourceToken, targetToken, targetAmount, maxSourceAmount, deadline);\\n\\n        return\\n            _trade(\\n                TradeTokens({ sourceToken: sourceToken, targetToken: targetToken }),\\n                TradeParams({ bySourceAmount: false, amount: targetAmount, limit: maxSourceAmount }),\\n                TraderInfo({ trader: msg.sender, beneficiary: beneficiary }),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function tradeByTargetAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused nonReentrant returns (uint256) {\\n        _verifyTradeParams(sourceToken, targetToken, targetAmount, maxSourceAmount, deadline);\\n\\n        sourceToken.permit(msg.sender, address(this), maxSourceAmount, deadline, Signature({ v: v, r: r, s: s }));\\n\\n        return\\n            _trade(\\n                TradeTokens({ sourceToken: sourceToken, targetToken: targetToken }),\\n                TradeParams({ bySourceAmount: false, amount: targetAmount, limit: maxSourceAmount }),\\n                TraderInfo({ trader: msg.sender, beneficiary: beneficiary }),\\n                deadline\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    )\\n        external\\n        validAddress(address(token))\\n        greaterThanZero(amount)\\n        validAddress(address(recipient))\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        if (!token.isEqual(_bnt) && !_networkSettings.isTokenWhitelisted(token)) {\\n            revert NotWhitelisted();\\n        }\\n\\n        uint256 feeAmount = MathEx.mulDivF(amount, _networkSettings.flashLoanFeePPM(token), PPM_RESOLUTION);\\n\\n        // save the current balance\\n        uint256 prevBalance = token.balanceOf(address(this));\\n\\n        // transfer the amount from the master vault to the recipient\\n        _masterVault.withdrawFunds(token, payable(address(recipient)), amount);\\n\\n        // invoke the recipient's callback\\n        recipient.onFlashLoan(msg.sender, token.toIERC20(), amount, feeAmount, data);\\n\\n        // ensure that the tokens + fee have been deposited back to the network\\n        uint256 returnedAmount = token.balanceOf(address(this)) - prevBalance;\\n        if (returnedAmount < amount + feeAmount) {\\n            revert InsufficientFlashLoanReturn();\\n        }\\n\\n        // transfer the amount and the fee back to the vault\\n        if (token.isNative()) {\\n            payable(address(_masterVault)).sendValue(returnedAmount);\\n        } else {\\n            token.safeTransfer(payable(address(_masterVault)), returnedAmount);\\n        }\\n\\n        // notify the pool of accrued fees\\n        if (token.isEqual(_bnt)) {\\n            IBNTPool cachedBNTPool = _bntPool;\\n\\n            cachedBNTPool.onFeesCollected(token, feeAmount, false);\\n        } else {\\n            // get the pool and verify that it exists\\n            IPoolCollection poolCollection = _poolCollection(token);\\n            poolCollection.onFeesCollected(token, feeAmount);\\n        }\\n\\n        emit FlashLoanCompleted({ token: token, borrower: msg.sender, amount: amount, feeAmount: feeAmount });\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable whenNotPaused onlyRoleMember(ROLE_MIGRATION_MANAGER) nonReentrant {\\n        bytes32 contextId = keccak256(\\n            abi.encodePacked(msg.sender, _time(), token, provider, amount, availableAmount, originalAmount)\\n        );\\n\\n        if (token.isEqual(_bnt)) {\\n            _depositBNTFor(contextId, provider, amount, msg.sender, true, originalAmount);\\n        } else {\\n            _depositBaseTokenFor(contextId, provider, token, amount, msg.sender, availableAmount);\\n        }\\n\\n        emit FundsMigrated(contextId, token, provider, amount, availableAmount, originalAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IBancorNetwork\\n     */\\n    function withdrawNetworkFees(address recipient)\\n        external\\n        whenNotPaused\\n        onlyRoleMember(ROLE_NETWORK_FEE_MANAGER)\\n        validAddress(recipient)\\n        returns (uint256)\\n    {\\n        uint256 currentPendingNetworkFeeAmount = _pendingNetworkFeeAmount;\\n        if (currentPendingNetworkFeeAmount == 0) {\\n            return 0;\\n        }\\n\\n        _pendingNetworkFeeAmount = 0;\\n\\n        _masterVault.withdrawFunds(Token(address(_bnt)), payable(recipient), currentPendingNetworkFeeAmount);\\n\\n        emit NetworkFeesWithdrawn(msg.sender, recipient, currentPendingNetworkFeeAmount);\\n\\n        return currentPendingNetworkFeeAmount;\\n    }\\n\\n    /**\\n     * @dev returns whether the network is currently paused\\n     */\\n    function isPaused() external view returns (bool) {\\n        return paused();\\n    }\\n\\n    /**\\n     * @dev pauses the network\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_EMERGENCY_STOPPER privilege\\n     */\\n    function pause() external onlyRoleMember(ROLE_EMERGENCY_STOPPER) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev resumes the network\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_EMERGENCY_STOPPER privilege\\n     */\\n    function resume() external onlyRoleMember(ROLE_EMERGENCY_STOPPER) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev sets the new latest pool collection for the given type\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function _setLatestPoolCollection(uint16 poolType, IPoolCollection poolCollection) private {\\n        IPoolCollection prevLatestPoolCollection = _latestPoolCollections[poolType];\\n        if (prevLatestPoolCollection == poolCollection) {\\n            return;\\n        }\\n\\n        _latestPoolCollections[poolType] = poolCollection;\\n\\n        emit LatestPoolCollectionReplaced({\\n            poolType: poolType,\\n            prevPoolCollection: prevLatestPoolCollection,\\n            newPoolCollection: poolCollection\\n        });\\n    }\\n\\n    /**\\n     * @dev verifies that a pool collection is a valid latest pool collection (e.g., it either exists or a reset to zero)\\n     */\\n    function _verifyLatestPoolCollectionCandidate(IPoolCollection poolCollection) private view {\\n        if (address(poolCollection) != address(0) && !_poolCollections.contains(address(poolCollection))) {\\n            revert DoesNotExist();\\n        }\\n    }\\n\\n    /**\\n     * @dev generates context ID for a deposit request\\n     */\\n    function _depositContextId(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        address caller\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(caller, _time(), provider, pool, tokenAmount));\\n    }\\n\\n    /**\\n     * @dev generates context ID for a withdraw request\\n     */\\n    function _withdrawContextId(uint256 id, address caller) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(caller, _time(), id));\\n    }\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider from caller\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the liquidity tokens on its behalf\\n     */\\n    function _depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        address caller\\n    ) private returns (uint256) {\\n        bytes32 contextId = _depositContextId(provider, pool, tokenAmount, caller);\\n\\n        if (pool.isEqual(_bnt)) {\\n            return _depositBNTFor(contextId, provider, tokenAmount, caller, false, 0);\\n        }\\n\\n        return _depositBaseTokenFor(contextId, provider, pool, tokenAmount, caller, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev deposits BNT liquidity for the specified provider from caller\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer BNT on its behalf\\n     */\\n    function _depositBNTFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        address caller,\\n        bool isMigrating,\\n        uint256 originalAmount\\n    ) private returns (uint256) {\\n        IBNTPool cachedBNTPool = _bntPool;\\n\\n        // transfer the tokens from the caller to the BNT pool\\n        _bnt.transferFrom(caller, address(cachedBNTPool), bntAmount);\\n\\n        // process BNT pool deposit\\n        return cachedBNTPool.depositFor(contextId, provider, bntAmount, isMigrating, originalAmount);\\n    }\\n\\n    /**\\n     * @dev deposits base token liquidity for the specified provider from sender\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer base tokens to on its behalf\\n     */\\n    function _depositBaseTokenFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        address caller,\\n        uint256 availableAmount\\n    ) private returns (uint256) {\\n        // transfer the tokens from the sender to the vault\\n        _depositToMasterVault(pool, caller, availableAmount);\\n\\n        // get the pool collection that managed this pool\\n        IPoolCollection poolCollection = _poolCollection(pool);\\n\\n        // process deposit to the base token pool (includes the native token pool)\\n        return poolCollection.depositFor(contextId, provider, pool, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit\\n     * request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function _depositBaseTokenForPermitted(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        Signature memory signature\\n    ) private returns (uint256) {\\n        address caller = msg.sender;\\n\\n        pool.permit(caller, address(this), tokenAmount, deadline, signature);\\n\\n        return\\n            _depositBaseTokenFor(\\n                _depositContextId(provider, pool, tokenAmount, caller),\\n                provider,\\n                pool,\\n                tokenAmount,\\n                caller,\\n                tokenAmount\\n            );\\n    }\\n\\n    /**\\n     * @dev handles BNT withdrawal\\n     */\\n    function _withdrawBNT(\\n        bytes32 contextId,\\n        address provider,\\n        CompletedWithdrawal memory completedRequest\\n    ) private returns (uint256) {\\n        IBNTPool cachedBNTPool = _bntPool;\\n\\n        // transfer the pool tokens to from the pending withdrawals contract to the BNT pool\\n        completedRequest.poolToken.transferFrom(\\n            address(_pendingWithdrawals),\\n            address(cachedBNTPool),\\n            completedRequest.poolTokenAmount\\n        );\\n\\n        // transfer vBNT from the caller to the BNT pool\\n        _vbnt.transferFrom(provider, address(cachedBNTPool), completedRequest.poolTokenAmount);\\n\\n        // call withdraw on the BNT pool\\n        return\\n            cachedBNTPool.withdraw(\\n                contextId,\\n                provider,\\n                completedRequest.poolTokenAmount,\\n                completedRequest.reserveTokenAmount\\n            );\\n    }\\n\\n    /**\\n     * @dev handles base token withdrawal\\n     */\\n    function _withdrawBaseToken(\\n        bytes32 contextId,\\n        address provider,\\n        CompletedWithdrawal memory completedRequest\\n    ) private returns (uint256) {\\n        Token pool = completedRequest.poolToken.reserveToken();\\n\\n        // get the pool collection that manages this pool\\n        IPoolCollection poolCollection = _poolCollection(pool);\\n\\n        // transfer the pool tokens to from the pending withdrawals contract to the pool collection\\n        completedRequest.poolToken.transferFrom(\\n            address(_pendingWithdrawals),\\n            address(poolCollection),\\n            completedRequest.poolTokenAmount\\n        );\\n\\n        // call withdraw on the base token pool - returns the amounts/breakdown\\n        return\\n            poolCollection.withdraw(\\n                contextId,\\n                provider,\\n                pool,\\n                completedRequest.poolTokenAmount,\\n                completedRequest.reserveTokenAmount\\n            );\\n    }\\n\\n    /**\\n     * @dev verifies that the provided trade params are valid\\n     */\\n    function _verifyTradeParams(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 amount,\\n        uint256 limit,\\n        uint256 deadline\\n    ) internal view {\\n        _validAddress(address(sourceToken));\\n        _validAddress(address(targetToken));\\n\\n        if (sourceToken == targetToken) {\\n            revert InvalidToken();\\n        }\\n\\n        _greaterThanZero(amount);\\n        _greaterThanZero(limit);\\n\\n        if (deadline < _time()) {\\n            revert DeadlineExpired();\\n        }\\n    }\\n\\n    /**\\n     * @dev performs a trade by providing either the source or target amount:\\n     *\\n     * - when trading by the source amount, the amount represents the source amount and the limit is the minimum return\\n     *   amount\\n     * - when trading by the target amount, the amount represents the target amount and the limit is the maximum source\\n     *   amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function _trade(\\n        TradeTokens memory tokens,\\n        TradeParams memory params,\\n        TraderInfo memory traderInfo,\\n        uint256 deadline\\n    ) private returns (uint256) {\\n        // ensure the beneficiary is set\\n        if (traderInfo.beneficiary == address(0)) {\\n            traderInfo.beneficiary = traderInfo.trader;\\n        }\\n\\n        bytes32 contextId = keccak256(\\n            abi.encodePacked(\\n                traderInfo.trader,\\n                _time(),\\n                tokens.sourceToken,\\n                tokens.targetToken,\\n                params.amount,\\n                params.limit,\\n                params.bySourceAmount,\\n                deadline,\\n                traderInfo.beneficiary\\n            )\\n        );\\n\\n        // perform either a single or double hop trade, based on the source and the target pool\\n        TradeResult memory firstHopTradeResult;\\n        TradeResult memory lastHopTradeResult;\\n        uint256 networkFeeAmount;\\n\\n        if (tokens.sourceToken.isEqual(_bnt)) {\\n            lastHopTradeResult = _tradeBNT(contextId, tokens.targetToken, true, params);\\n\\n            firstHopTradeResult = lastHopTradeResult;\\n\\n            networkFeeAmount = lastHopTradeResult.networkFeeAmount;\\n\\n            emit TokensTraded({\\n                contextId: contextId,\\n                sourceToken: tokens.sourceToken,\\n                targetToken: tokens.targetToken,\\n                sourceAmount: lastHopTradeResult.sourceAmount,\\n                targetAmount: lastHopTradeResult.targetAmount,\\n                bntAmount: lastHopTradeResult.sourceAmount,\\n                targetFeeAmount: lastHopTradeResult.tradingFeeAmount,\\n                bntFeeAmount: 0,\\n                trader: traderInfo.trader\\n            });\\n        } else if (tokens.targetToken.isEqual(_bnt)) {\\n            lastHopTradeResult = _tradeBNT(contextId, tokens.sourceToken, false, params);\\n\\n            firstHopTradeResult = lastHopTradeResult;\\n\\n            networkFeeAmount = lastHopTradeResult.networkFeeAmount;\\n\\n            emit TokensTraded({\\n                contextId: contextId,\\n                sourceToken: tokens.sourceToken,\\n                targetToken: tokens.targetToken,\\n                sourceAmount: lastHopTradeResult.sourceAmount,\\n                targetAmount: lastHopTradeResult.targetAmount,\\n                bntAmount: lastHopTradeResult.targetAmount,\\n                targetFeeAmount: lastHopTradeResult.tradingFeeAmount,\\n                bntFeeAmount: lastHopTradeResult.tradingFeeAmount,\\n                trader: traderInfo.trader\\n            });\\n        } else {\\n            (firstHopTradeResult, lastHopTradeResult) = _tradeBaseTokens(contextId, tokens, params);\\n\\n            networkFeeAmount = firstHopTradeResult.networkFeeAmount + lastHopTradeResult.networkFeeAmount;\\n\\n            emit TokensTraded({\\n                contextId: contextId,\\n                sourceToken: tokens.sourceToken,\\n                targetToken: tokens.targetToken,\\n                sourceAmount: firstHopTradeResult.sourceAmount,\\n                targetAmount: lastHopTradeResult.targetAmount,\\n                bntAmount: firstHopTradeResult.targetAmount,\\n                targetFeeAmount: lastHopTradeResult.tradingFeeAmount,\\n                bntFeeAmount: firstHopTradeResult.tradingFeeAmount,\\n                trader: traderInfo.trader\\n            });\\n        }\\n\\n        // transfer the tokens from the trader to the vault\\n        _depositToMasterVault(tokens.sourceToken, traderInfo.trader, firstHopTradeResult.sourceAmount);\\n\\n        // transfer the target tokens/native token to the beneficiary\\n        _masterVault.withdrawFunds(\\n            tokens.targetToken,\\n            payable(traderInfo.beneficiary),\\n            lastHopTradeResult.targetAmount\\n        );\\n\\n        // update the pending network fee amount to be burned by the vortex\\n        _pendingNetworkFeeAmount += networkFeeAmount;\\n\\n        return params.bySourceAmount ? lastHopTradeResult.targetAmount : lastHopTradeResult.sourceAmount;\\n    }\\n\\n    /**\\n     * @dev performs a single hop between BNT and a base token trade by providing either the source or the target amount\\n     *\\n     * - when trading by the source amount, the amount represents the source amount and the limit is the minimum return\\n     *   amount\\n     * - when trading by the target amount, the amount represents the target amount and the limit is the maximum source\\n     *   amount\\n     */\\n    function _tradeBNT(\\n        bytes32 contextId,\\n        Token pool,\\n        bool fromBNT,\\n        TradeParams memory params\\n    ) private returns (TradeResult memory) {\\n        TradeTokens memory tokens = fromBNT\\n            ? TradeTokens({ sourceToken: Token(address(_bnt)), targetToken: pool })\\n            : TradeTokens({ sourceToken: pool, targetToken: Token(address(_bnt)) });\\n\\n        TradeAmountAndFee memory tradeAmountsAndFee = params.bySourceAmount\\n            ? _poolCollection(pool).tradeBySourceAmount(\\n                contextId,\\n                tokens.sourceToken,\\n                tokens.targetToken,\\n                params.amount,\\n                params.limit\\n            )\\n            : _poolCollection(pool).tradeByTargetAmount(\\n                contextId,\\n                tokens.sourceToken,\\n                tokens.targetToken,\\n                params.amount,\\n                params.limit\\n            );\\n\\n        // if the target token is BNT, notify the BNT pool on collected fees (which shouldn't include the network fee\\n        // amount, so we have to deduct it explicitly from the full trading fee amount)\\n        if (!fromBNT) {\\n            _bntPool.onFeesCollected(\\n                pool,\\n                tradeAmountsAndFee.tradingFeeAmount - tradeAmountsAndFee.networkFeeAmount,\\n                true\\n            );\\n        }\\n\\n        return\\n            TradeResult({\\n                sourceAmount: params.bySourceAmount ? params.amount : tradeAmountsAndFee.amount,\\n                targetAmount: params.bySourceAmount ? tradeAmountsAndFee.amount : params.amount,\\n                tradingFeeAmount: tradeAmountsAndFee.tradingFeeAmount,\\n                networkFeeAmount: tradeAmountsAndFee.networkFeeAmount\\n            });\\n    }\\n\\n    /**\\n     * @dev performs a double hop trade between two base tokens by providing either the source or the target amount\\n     *\\n     * - when trading by the source amount, the amount represents the source amount and the limit is the minimum return\\n     *   amount\\n     * - when trading by the target amount, the amount represents the target amount and the limit is the maximum source\\n     *   amount\\n     */\\n    function _tradeBaseTokens(\\n        bytes32 contextId,\\n        TradeTokens memory tokens,\\n        TradeParams memory params\\n    ) private returns (TradeResult memory, TradeResult memory) {\\n        if (params.bySourceAmount) {\\n            uint256 sourceAmount = params.amount;\\n            uint256 minReturnAmount = params.limit;\\n\\n            // trade source tokens to BNT (while accepting any return amount)\\n            TradeResult memory targetHop1 = _tradeBNT(\\n                contextId,\\n                tokens.sourceToken,\\n                false,\\n                TradeParams({ bySourceAmount: true, amount: sourceAmount, limit: 1 })\\n            );\\n\\n            // trade the received BNT target amount to target tokens (while respecting the minimum return amount)\\n            TradeResult memory targetHop2 = _tradeBNT(\\n                contextId,\\n                tokens.targetToken,\\n                true,\\n                TradeParams({ bySourceAmount: true, amount: targetHop1.targetAmount, limit: minReturnAmount })\\n            );\\n\\n            return (targetHop1, targetHop2);\\n        }\\n\\n        uint256 targetAmount = params.amount;\\n        uint256 maxSourceAmount = params.limit;\\n\\n        // trade any amount of BNT to get the requested target amount (we will use the actual traded amount to restrict\\n        // the trade from the source)\\n        TradeResult memory sourceHop2 = _tradeBNT(\\n            contextId,\\n            tokens.targetToken,\\n            true,\\n            TradeParams({ bySourceAmount: false, amount: targetAmount, limit: type(uint256).max })\\n        );\\n\\n        // trade source tokens to the required amount of BNT (while respecting the maximum source amount)\\n        TradeResult memory sourceHop1 = _tradeBNT(\\n            contextId,\\n            tokens.sourceToken,\\n            false,\\n            TradeParams({ bySourceAmount: false, amount: sourceHop2.sourceAmount, limit: maxSourceAmount })\\n        );\\n\\n        return (sourceHop1, sourceHop2);\\n    }\\n\\n    /**\\n     * @dev deposits tokens to the master vault and verifies that msg.value corresponds to its type\\n     */\\n    function _depositToMasterVault(\\n        Token token,\\n        address caller,\\n        uint256 amount\\n    ) private {\\n        if (token.isNative()) {\\n            if (msg.value < amount) {\\n                revert NativeTokenAmountMismatch();\\n            }\\n\\n            // using a regular transfer here would revert due to exceeding the 2300 gas limit which is why we're using\\n            // call instead (via sendValue), which the 2300 gas limit does not apply for\\n            payable(address(_masterVault)).sendValue(amount);\\n\\n            // refund the caller for the remaining native token amount\\n            if (msg.value > amount) {\\n                payable(address(caller)).sendValue(msg.value - amount);\\n            }\\n        } else {\\n            if (msg.value > 0) {\\n                revert NativeTokenAmountMismatch();\\n            }\\n\\n            token.safeTransferFrom(caller, address(_masterVault), amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev verifies that the specified pool is managed by a valid pool collection and returns it\\n     */\\n    function _poolCollection(Token token) private view returns (IPoolCollection) {\\n        // verify that the pool is managed by a valid pool collection\\n        IPoolCollection poolCollection = _collectionByPool[token];\\n        if (address(poolCollection) == address(0)) {\\n            revert InvalidToken();\\n        }\\n\\n        return poolCollection;\\n    }\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     */\\n    function _initWithdrawal(\\n        address provider,\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount\\n    ) private returns (uint256) {\\n        // transfer the pool tokens from the provider. Note, that the provider should have either previously approved\\n        // the pool token amount or provided a EIP712 typed signature for an EIP2612 permit request\\n        poolToken.safeTransferFrom(provider, address(_pendingWithdrawals), poolTokenAmount);\\n\\n        return _pendingWithdrawals.initWithdrawal(provider, poolToken, poolTokenAmount);\\n    }\\n\\n    /**\\n     * @dev grants/revokes required roles to/from a pool collection\\n     */\\n    function _setAccessRoles(IPoolCollection poolCollection, bool set) private {\\n        address poolCollectionAddress = address(poolCollection);\\n\\n        if (set) {\\n            _bntPool.grantRole(ROLE_BNT_MANAGER, poolCollectionAddress);\\n            _bntPool.grantRole(ROLE_VAULT_MANAGER, poolCollectionAddress);\\n            _bntPool.grantRole(ROLE_FUNDING_MANAGER, poolCollectionAddress);\\n            _masterVault.grantRole(ROLE_ASSET_MANAGER, poolCollectionAddress);\\n            _externalProtectionVault.grantRole(ROLE_ASSET_MANAGER, poolCollectionAddress);\\n        } else {\\n            _bntPool.revokeRole(ROLE_BNT_MANAGER, poolCollectionAddress);\\n            _bntPool.revokeRole(ROLE_VAULT_MANAGER, poolCollectionAddress);\\n            _bntPool.revokeRole(ROLE_FUNDING_MANAGER, poolCollectionAddress);\\n            _masterVault.revokeRole(ROLE_ASSET_MANAGER, poolCollectionAddress);\\n            _externalProtectionVault.revokeRole(ROLE_ASSET_MANAGER, poolCollectionAddress);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9de2ff93e4ba97cbfb2177da76e08427fa76b0fc7dc98262054fddd57b455c37\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolCollection } from \\\"../../pools/interfaces/IPoolCollection.sol\\\";\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork is IUpgradeable {\\n    /**\\n     * @dev returns the set of all valid pool collections\\n     */\\n    function poolCollections() external view returns (IPoolCollection[] memory);\\n\\n    /**\\n     * @dev returns the most recent collection that was added to the pool collections set for a specific type\\n     */\\n    function latestPoolCollection(uint16 poolType) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns the set of all liquidity pools\\n     */\\n    function liquidityPools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (IPoolCollection);\\n\\n    /**\\n     * @dev returns whether the pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the pool doesn't already exist\\n     */\\n    function createPool(uint16 poolType, Token token) external;\\n\\n    /**\\n     * @dev creates new pools\\n     *\\n     * requirements:\\n     *\\n     * - none of the pools already exists\\n     */\\n    function createPools(uint16 poolType, Token[] calldata tokens) external;\\n\\n    /**\\n     * @dev migrates a list of pools between pool collections\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     */\\n    function migratePools(Token[] calldata pools) external;\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function depositFor(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the current provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function deposit(Token pool, uint256 tokenAmount) external payable returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit\\n     * request and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositForPermitted(\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev deposits liquidity by providing an EIP712 typed signature for an EIP2612 permit request and returns the\\n     * respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function depositPermitted(\\n        Token pool,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the contract to transfer the pool token amount on its behalf\\n     */\\n    function initWithdrawal(IPoolToken poolToken, uint256 poolTokenAmount) external returns (uint256);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal by providing an EIP712 typed signature for an EIP2612 permit request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function initWithdrawalPermitted(\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request, and returns the number of pool token amount associated with the withdrawal\\n     * request\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws liquidity and returns the withdrawn amount\\n     *\\n     * requirements:\\n     *\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the specified withdrawal request is eligible for completion\\n     * - the provider must have approved the network to transfer vBNT amount on its behalf, when withdrawing BNT\\n     * liquidity\\n     */\\n    function withdraw(uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount, and returns the trade target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request, and returns the trade target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeBySourceAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount, and returns the trade source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount and providing an EIP712 typed signature for an\\n     * EIP2612 permit request and returns the target amount and fee, and returns the trade source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have provided a valid and unused EIP712 typed signature\\n     */\\n    function tradeByTargetAmountPermitted(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(\\n        Token token,\\n        uint256 amount,\\n        IFlashLoanRecipient recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev deposits liquidity during a migration\\n     */\\n    function migrateLiquidity(\\n        Token token,\\n        address provider,\\n        uint256 amount,\\n        uint256 availableAmount,\\n        uint256 originalAmount\\n    ) external payable;\\n\\n    /**\\n     * @dev withdraws pending network fees, and returns the amount of fees withdrawn\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege\\n     */\\n    function withdrawNetworkFees(address recipient) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x21e20154b0a1017bb5da9f9788030740d2391711502cf269814f58452a479fa6\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/INetworkSettings.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nerror NotWhitelisted();\\n\\nstruct VortexRewards {\\n    // the percentage of converted BNT to be sent to the initiator of the burning event (in units of PPM)\\n    uint32 burnRewardPPM;\\n    // the maximum burn reward to be sent to the initiator of the burning event\\n    uint256 burnRewardMaxAmount;\\n}\\n\\n/**\\n * @dev Network Settings interface\\n */\\ninterface INetworkSettings is IUpgradeable {\\n    /**\\n     * @dev returns the protected tokens whitelist\\n     */\\n    function protectedTokenWhitelist() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev checks whether a given token is whitelisted\\n     */\\n    function isTokenWhitelisted(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the BNT funding limit for a given pool\\n     */\\n    function poolFundingLimit(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the minimum BNT trading liquidity required before the system enables trading in the relevant pool\\n     */\\n    function minLiquidityForTrading() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the global network fee (in units of PPM)\\n     *\\n     * notes:\\n     *\\n     * - the network fee is a portion of the total fees from each pool\\n     */\\n    function networkFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the withdrawal fee (in units of PPM)\\n     */\\n    function withdrawalFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the default flash-loan fee (in units of PPM)\\n     */\\n    function defaultFlashLoanFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the flash-loan fee (in units of PPM) of a pool\\n     */\\n    function flashLoanFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns the vortex settings\\n     */\\n    function vortexRewards() external view returns (VortexRewards memory);\\n}\\n\",\"keccak256\":\"0x244aba25ebed03e4b5fd7c23416a2b29ea51b83c49b08e9945dbee94093a3433\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/network/interfaces/IPendingWithdrawals.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IPoolToken } from \\\"../../pools/interfaces/IPoolToken.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\n/**\\n * @dev the data struct representing a pending withdrawal request\\n */\\nstruct WithdrawalRequest {\\n    address provider; // the liquidity provider\\n    IPoolToken poolToken; // the locked pool token\\n    Token reserveToken; // the reserve token to withdraw\\n    uint32 createdAt; // the time when the request was created (Unix timestamp))\\n    uint256 poolTokenAmount; // the locked pool token amount\\n    uint256 reserveTokenAmount; // the expected reserve token amount to withdraw\\n}\\n\\n/**\\n * @dev the data struct representing a completed withdrawal request\\n */\\nstruct CompletedWithdrawal {\\n    IPoolToken poolToken; // the withdraw pool token\\n    uint256 poolTokenAmount; // the original pool token amount in the withdrawal request\\n    uint256 reserveTokenAmount; // the original reserve token amount at the time of the withdrawal init request\\n}\\n\\n/**\\n * @dev Pending Withdrawals interface\\n */\\ninterface IPendingWithdrawals is IUpgradeable {\\n    /**\\n     * @dev returns the lock duration\\n     */\\n    function lockDuration() external view returns (uint32);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests count for a specific provider\\n     */\\n    function withdrawalRequestCount(address provider) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the pending withdrawal requests IDs for a specific provider\\n     */\\n    function withdrawalRequestIds(address provider) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev returns the pending withdrawal request with the specified ID\\n     */\\n    function withdrawalRequest(uint256 id) external view returns (WithdrawalRequest memory);\\n\\n    /**\\n     * @dev initiates liquidity withdrawal\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function initWithdrawal(\\n        address provider,\\n        IPoolToken poolToken,\\n        uint256 poolTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev cancels a withdrawal request, and returns the number of pool tokens which were sent back to the provider\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     */\\n    function cancelWithdrawal(address provider, uint256 id) external returns (uint256);\\n\\n    /**\\n     * @dev completes a withdrawal request, and returns the pool token and its transferred amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the provider must have already initiated a withdrawal and received the specified id\\n     * - the lock duration has ended\\n     */\\n    function completeWithdrawal(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 id\\n    ) external returns (CompletedWithdrawal memory);\\n\\n    /**\\n     * @dev returns whether the given request is ready for withdrawal\\n     */\\n    function isReadyForWithdrawal(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c70e6b072e17e97ae087a1d26059ef081eb845808efb228a75abe0276484946\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IBNTPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVault } from \\\"../../vaults/interfaces/IVault.sol\\\";\\n\\n// the BNT pool token manager role is required to access the BNT pool tokens\\nbytes32 constant ROLE_BNT_POOL_TOKEN_MANAGER = keccak256(\\\"ROLE_BNT_POOL_TOKEN_MANAGER\\\");\\n\\n// the BNT manager role is required to request the BNT pool to mint BNT\\nbytes32 constant ROLE_BNT_MANAGER = keccak256(\\\"ROLE_BNT_MANAGER\\\");\\n\\n// the vault manager role is required to request the BNT pool to burn BNT from the master vault\\nbytes32 constant ROLE_VAULT_MANAGER = keccak256(\\\"ROLE_VAULT_MANAGER\\\");\\n\\n// the funding manager role is required to request or renounce funding from the BNT pool\\nbytes32 constant ROLE_FUNDING_MANAGER = keccak256(\\\"ROLE_FUNDING_MANAGER\\\");\\n\\n/**\\n * @dev BNT Pool interface\\n */\\ninterface IBNTPool is IVault {\\n    /**\\n     * @dev returns the BNT pool token contract\\n     */\\n    function poolToken() external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the total staked BNT balance in the network\\n     */\\n    function stakedBalance() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the current funding of given pool\\n     */\\n    function currentPoolFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the available BNT funding for a given pool\\n     */\\n    function availableFunding(Token pool) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying BNT amount\\n     */\\n    function poolTokenToUnderlying(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying BNT amount to pool token amount\\n     */\\n    function underlyingToPoolToken(uint256 bntAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(uint256 bntAmountToDistribute) external view returns (uint256);\\n\\n    /**\\n     * @dev mints BNT to the recipient\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_BNT_MANAGER role\\n     */\\n    function mint(address recipient, uint256 bntAmount) external;\\n\\n    /**\\n     * @dev burns BNT from the vault\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_VAULT_MANAGER role\\n     */\\n    function burnFromVault(uint256 bntAmount) external;\\n\\n    /**\\n     * @dev deposits BNT liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - BNT tokens must have been already deposited into the contract\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 bntAmount,\\n        bool isMigrating,\\n        uint256 originalVBNTAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev withdraws BNT liquidity on behalf of a specific provider and returns the withdrawn BNT amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - bnBNT token must have been already deposited into the contract\\n     * - vBNT token must have been already deposited into the contract\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        uint256 poolTokenAmount,\\n        uint256 bntAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the withdrawn BNT amount\\n     */\\n    function withdrawalAmount(uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev requests BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the request amount should be below the funding limit for a given pool\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function requestFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev renounces BNT funding\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have the ROLE_FUNDING_MANAGER role\\n     * - the token must have been whitelisted\\n     * - the average rate of the pool must not deviate too much from its spot rate\\n     */\\n    function renounceFunding(\\n        bytes32 contextId,\\n        Token pool,\\n        uint256 bntAmount\\n    ) external;\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(\\n        Token pool,\\n        uint256 feeAmount,\\n        bool isTradeFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0xed6a5abb972bdc42e1d32dd4157c0968b5d34d3a6560dcffeb1479ed994fd5a8\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolCollection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { Fraction112 } from \\\"../../utility/FractionLibrary.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IPoolToken } from \\\"./IPoolToken.sol\\\";\\n\\nstruct PoolLiquidity {\\n    uint128 bntTradingLiquidity; // the BNT trading liquidity\\n    uint128 baseTokenTradingLiquidity; // the base token trading liquidity\\n    uint256 stakedBalance; // the staked balance\\n}\\n\\nstruct AverageRates {\\n    uint32 blockNumber;\\n    Fraction112 rate;\\n    Fraction112 invRate;\\n}\\n\\nstruct Pool {\\n    IPoolToken poolToken; // the pool token of the pool\\n    uint32 tradingFeePPM; // the trading fee (in units of PPM)\\n    bool tradingEnabled; // whether trading is enabled\\n    bool depositingEnabled; // whether depositing is enabled\\n    AverageRates averageRates; // the recent average rates\\n    PoolLiquidity liquidity; // the overall liquidity in the pool\\n}\\n\\nstruct WithdrawalAmounts {\\n    uint256 totalAmount;\\n    uint256 baseTokenAmount;\\n    uint256 bntAmount;\\n}\\n\\n// trading enabling/disabling reasons\\nuint8 constant TRADING_STATUS_UPDATE_DEFAULT = 0;\\nuint8 constant TRADING_STATUS_UPDATE_ADMIN = 1;\\nuint8 constant TRADING_STATUS_UPDATE_MIN_LIQUIDITY = 2;\\n\\nstruct TradeAmountAndFee {\\n    uint256 amount; // the source/target amount (depending on the context) resulting from the trade\\n    uint256 tradingFeeAmount; // the trading fee amount\\n    uint256 networkFeeAmount; // the network fee amount (always in units of BNT)\\n}\\n\\n/**\\n * @dev Pool Collection interface\\n */\\ninterface IPoolCollection is IVersioned {\\n    /**\\n     * @dev returns the type of the pool\\n     */\\n    function poolType() external pure returns (uint16);\\n\\n    /**\\n     * @dev returns the default trading fee (in units of PPM)\\n     */\\n    function defaultTradingFeePPM() external view returns (uint32);\\n\\n    /**\\n     * @dev returns all the pools which are managed by this pool collection\\n     */\\n    function pools() external view returns (Token[] memory);\\n\\n    /**\\n     * @dev returns the number of all the pools which are managed by this pool collection\\n     */\\n    function poolCount() external view returns (uint256);\\n\\n    /**\\n     * @dev returns whether a pool is valid\\n     */\\n    function isPoolValid(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns the overall liquidity in the pool\\n     */\\n    function poolLiquidity(Token pool) external view returns (PoolLiquidity memory);\\n\\n    /**\\n     * @dev returns the pool token of the pool\\n     */\\n    function poolToken(Token pool) external view returns (IPoolToken);\\n\\n    /**\\n     * @dev returns the trading fee (in units of PPM)\\n     */\\n    function tradingFeePPM(Token pool) external view returns (uint32);\\n\\n    /**\\n     * @dev returns whether trading is enabled\\n     */\\n    function tradingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether depositing is enabled\\n     */\\n    function depositingEnabled(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev returns whether the pool is stable\\n     */\\n    function isPoolStable(Token pool) external view returns (bool);\\n\\n    /**\\n     * @dev converts the specified pool token amount to the underlying base token amount\\n     */\\n    function poolTokenToUnderlying(Token pool, uint256 poolTokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev converts the specified underlying base token amount to pool token amount\\n     */\\n    function underlyingToPoolToken(Token pool, uint256 tokenAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the number of pool token to burn in order to increase everyone's underlying value by the specified\\n     * amount\\n     */\\n    function poolTokenAmountToBurn(\\n        Token pool,\\n        uint256 tokenAmountToDistribute,\\n        uint256 protocolPoolTokenAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev creates a new pool\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the pool should have been whitelisted\\n     * - the pool isn't already defined in the collection\\n     */\\n    function createPool(Token token) external;\\n\\n    /**\\n     * @dev deposits base token liquidity on behalf of a specific provider and returns the respective pool token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - assumes that the base token has been already deposited in the vault\\n     */\\n    function depositFor(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 tokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev handles some of the withdrawal-related actions and returns the withdrawn base token amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     * - the caller must have approved the collection to transfer/burn the pool token amount on its behalf\\n     */\\n    function withdraw(\\n        bytes32 contextId,\\n        address provider,\\n        Token pool,\\n        uint256 poolTokenAmount,\\n        uint256 baseTokenAmount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the amounts that would be returned if the position is currently withdrawn,\\n     * along with the breakdown of the base token and the BNT compensation\\n     */\\n    function withdrawalAmounts(Token pool, uint256 poolTokenAmount) external view returns (WithdrawalAmounts memory);\\n\\n    /**\\n     * @dev performs a trade by providing the source amount and returns the target amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeBySourceAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev performs a trade by providing the target amount and returns the required source amount and the associated fee\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function tradeByTargetAmount(\\n        bytes32 contextId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount\\n    ) external returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the output amount and fee when trading by providing the source amount\\n     */\\n    function tradeOutputAndFeeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev returns the input amount and fee when trading by providing the target amount\\n     */\\n    function tradeInputAndFeeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount\\n    ) external view returns (TradeAmountAndFee memory);\\n\\n    /**\\n     * @dev notifies the pool of accrued fees\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function onFeesCollected(Token pool, uint256 feeAmount) external;\\n\\n    /**\\n     * @dev migrates a pool to this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolIn(Token pool, Pool calldata data) external;\\n\\n    /**\\n     * @dev migrates a pool from this pool collection\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the pool migrator contract\\n     */\\n    function migratePoolOut(Token pool, IPoolCollection targetPoolCollection) external;\\n}\\n\",\"keccak256\":\"0x3935753a811c9fed7ca02d425fa656a5f09c7d7e22f94a43460161e8ed418bbd\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\n\\nimport { IPoolCollection } from \\\"./IPoolCollection.sol\\\";\\n\\n/**\\n * @dev Pool Migrator interface\\n */\\ninterface IPoolMigrator is IVersioned {\\n    /**\\n     * @dev migrates a pool and returns the new pool collection it exists in\\n     *\\n     * notes:\\n     *\\n     * - invalid or incompatible pools will be skipped gracefully\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the network contract\\n     */\\n    function migratePool(Token pool) external returns (IPoolCollection);\\n}\\n\",\"keccak256\":\"0xf1f4c1f7458de57841eb07d50b26dbfad769e407006226fa9777a9023ea3eb01\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/pools/interfaces/IPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { IERC20Burnable } from \\\"../../token/interfaces/IERC20Burnable.sol\\\";\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nimport { IVersioned } from \\\"../../utility/interfaces/IVersioned.sol\\\";\\nimport { IOwned } from \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Pool Token interface\\n */\\ninterface IPoolToken is IVersioned, IOwned, IERC20, IERC20Permit, IERC20Burnable {\\n    /**\\n     * @dev returns the address of the reserve token\\n     */\\n    function reserveToken() external view returns (Token);\\n\\n    /**\\n     * @dev increases the token supply and sends the new tokens to the given account\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x698423b0fc59424e60d5effe3b79b8aeb5d478b04e5569e3a4ba5fe6936fb2b7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/SafeERC20Ex.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x95b96153e9cb88df354da4731b3b856158cf6794abdfaf635455e853044f7f98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0x49d0e5ac0dab272f4001a63e7f4117eb13b42c655ee788c42a333f56f19ac2e9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/TokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { SafeERC20Ex } from \\\"./SafeERC20Ex.sol\\\";\\n\\nimport { Token } from \\\"./Token.sol\\\";\\n\\nstruct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\nlibrary TokenLibrary {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    error PermitUnsupported();\\n\\n    // the address that represents the native token reserve\\n    address public constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // the symbol that represents the native token\\n    string private constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n    // the decimals for the native token\\n    uint8 private constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n     */\\n    function isNative(Token token) internal pure returns (bool) {\\n        return address(token) == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the symbol of the native token/ERC20 token\\n     */\\n    function symbol(Token token) internal view returns (string memory) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_SYMBOL;\\n        }\\n\\n        return toERC20(token).symbol();\\n    }\\n\\n    /**\\n     * @dev returns the decimals of the native token/ERC20 token\\n     */\\n    function decimals(Token token) internal view returns (uint8) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_DECIMALS;\\n        }\\n\\n        return toERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev returns the balance of the native token/ERC20 token\\n     */\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        if (isNative(token)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token\\n     */\\n    function safeTransfer(\\n        Token token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNative(token)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeTransferFrom(\\n        Token token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0 || isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev approves a specific amount of the native token/ERC20 token from a specific holder\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function ensureApprove(\\n        Token token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev performs an EIP2612 permit\\n     */\\n    function permit(\\n        Token token,\\n        address owner,\\n        address spender,\\n        uint256 tokenAmount,\\n        uint256 deadline,\\n        Signature memory signature\\n    ) internal {\\n        if (isNative(token)) {\\n            revert PermitUnsupported();\\n        }\\n\\n        // permit the amount the owner is trying to deposit. Please note, that if the base token doesn't support\\n        // EIP2612 permit - either this call or the inner safeTransferFrom will revert\\n        IERC20Permit(address(token)).permit(\\n            owner,\\n            spender,\\n            tokenAmount,\\n            deadline,\\n            signature.v,\\n            signature.r,\\n            signature.s\\n        );\\n    }\\n\\n    /**\\n     * @dev compares between a token and another raw ERC20 token\\n     */\\n    function isEqual(Token token, IERC20 erc20Token) internal pure returns (bool) {\\n        return toIERC20(token) == erc20Token;\\n    }\\n\\n    /**\\n     * @dev utility function that converts an token to an IERC20\\n     */\\n    function toIERC20(Token token) internal pure returns (IERC20) {\\n        return IERC20(address(token));\\n    }\\n\\n    /**\\n     * @dev utility function that converts an token to an ERC20\\n     */\\n    function toERC20(Token token) internal pure returns (ERC20) {\\n        return ERC20(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xb02041a0d004feb0ace9b553d6d5e2fafdccedac769add4459dd6c12a306e591\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/token/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev burnable ERC20 interface\\n */\\ninterface IERC20Burnable {\\n    /**\\n     * @dev Destroys tokens from the caller.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys tokens from a recipient, deducting from the caller's allowance\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have allowance for recipient's tokens of at least the specified amount\\n     */\\n    function burnFrom(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x222a3ba8286edf54d3e75a70683ffcbe6eb3c5ba5f6b3c6a6d98a716e9bd5332\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nuint32 constant PPM_RESOLUTION = 1000000;\\n\",\"keccak256\":\"0x86dee231f6db3c82fd4e50ea4265c2e8b892f33b833e6d53f095438799724899\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Fraction.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nstruct Fraction {\\n    uint256 n;\\n    uint256 d;\\n}\\n\\nstruct Fraction112 {\\n    uint112 n;\\n    uint112 d;\\n}\\n\",\"keccak256\":\"0xeb90c14c4b52e14d58677f401c2d2bdb8242aeb3d32b94611d4243fbbd2af38b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/FractionLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Fraction, Fraction112 } from \\\"./Fraction.sol\\\";\\nimport { MathEx } from \\\"./MathEx.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction() pure returns (Fraction memory) {\\n    return Fraction({ n: 0, d: 1 });\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction zeroFraction112() pure returns (Fraction112 memory) {\\n    return Fraction112({ n: 0, d: 1 });\\n}\\n\\n/**\\n * @dev this library provides a set of fraction operations\\n */\\nlibrary FractionLibrary {\\n    error InvalidFraction();\\n\\n    /**\\n     * @dev returns whether a standard fraction is valid\\n     */\\n    function isValid(Fraction memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is valid\\n     */\\n    function isValid(Fraction112 memory fraction) internal pure returns (bool) {\\n        return fraction.d != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a standard fraction is positive\\n     */\\n    function isPositive(Fraction memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns whether a 112-bit fraction is positive\\n     */\\n    function isPositive(Fraction112 memory fraction) internal pure returns (bool) {\\n        return isValid(fraction) && fraction.n != 0;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction memory fraction) internal pure returns (Fraction memory) {\\n        Fraction memory invFraction = Fraction({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev returns the inverse of a given fraction\\n     */\\n    function inverse(Fraction112 memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction112 memory invFraction = Fraction112({ n: fraction.d, d: fraction.n });\\n\\n        if (!isValid(invFraction)) {\\n            revert InvalidFraction();\\n        }\\n\\n        return invFraction;\\n    }\\n\\n    /**\\n     * @dev reduces a standard fraction to a 112-bit fraction\\n     */\\n    function toFraction112(Fraction memory fraction) internal pure returns (Fraction112 memory) {\\n        Fraction memory reducedFraction = MathEx.reducedFraction(fraction, type(uint112).max);\\n\\n        return Fraction112({ n: uint112(reducedFraction.n), d: uint112(reducedFraction.d) });\\n    }\\n\\n    /**\\n     * @dev expands a 112-bit fraction to a standard fraction\\n     */\\n    function fromFraction112(Fraction112 memory fraction) internal pure returns (Fraction memory) {\\n        return Fraction({ n: fraction.n, d: fraction.d });\\n    }\\n}\\n\",\"keccak256\":\"0x1506bee0bd3cb8e9ff6a6cd33e43966288cc65ada2b52354fc62108410e3f476\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Fraction } from \\\"./Fraction.sol\\\";\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nuint256 constant ONE = 0x80000000000000000000000000000000;\\nuint256 constant LN2 = 0x58b90bfbe8e7bcd5e4f1d9cc01f97b57;\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns `2 ^ f` by calculating `e ^ (f * ln(2))`, where `e` is Euler's number:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function exp2(Fraction memory f) internal pure returns (Fraction memory) {\\n        uint256 x = MathEx.mulDivF(LN2, f.n, f.d);\\n        uint256 y;\\n        uint256 z;\\n        uint256 n;\\n\\n        if (x >= (ONE << 4)) {\\n            revert Overflow();\\n        }\\n\\n        unchecked {\\n            z = y = x % (ONE >> 3); // get the input modulo 2^(-3)\\n            z = (z * y) / ONE;\\n            n += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n            z = (z * y) / ONE;\\n            n += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n            z = (z * y) / ONE;\\n            n += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n            z = (z * y) / ONE;\\n            n += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n            z = (z * y) / ONE;\\n            n += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n            z = (z * y) / ONE;\\n            n += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n            n = n / 0x21c3677c82b40000 + y + ONE; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n            if ((x & (ONE >> 3)) != 0)\\n                n = (n * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\\n            if ((x & (ONE >> 2)) != 0)\\n                n = (n * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\\n            if ((x & (ONE >> 1)) != 0)\\n                n = (n * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\\n            if ((x & (ONE << 0)) != 0)\\n                n = (n * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\\n            if ((x & (ONE << 1)) != 0)\\n                n = (n * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\\n            if ((x & (ONE << 2)) != 0)\\n                n = (n * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\\n            if ((x & (ONE << 3)) != 0)\\n                n = (n * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\\n        }\\n\\n        return Fraction({ n: n, d: ONE });\\n    }\\n\\n    /**\\n     * @dev returns a fraction with reduced components\\n     */\\n    function reducedFraction(Fraction memory fraction, uint256 max) internal pure returns (Fraction memory) {\\n        uint256 scale = Math.ceilDiv(Math.max(fraction.n, fraction.d), max);\\n        return Fraction({ n: fraction.n / scale, d: fraction.d / scale });\\n    }\\n\\n    /**\\n     * @dev returns the weighted average of two fractions\\n     */\\n    function weightedAverage(\\n        Fraction memory fraction1,\\n        Fraction memory fraction2,\\n        uint256 weight1,\\n        uint256 weight2\\n    ) internal pure returns (Fraction memory) {\\n        return\\n            Fraction({\\n                n: fraction1.n * fraction2.d * weight1 + fraction1.d * fraction2.n * weight2,\\n                d: fraction1.d * fraction2.d * (weight1 + weight2)\\n            });\\n    }\\n\\n    /**\\n     * @dev returns whether or not the deviation of an offset sample from a base sample is within a permitted range\\n     * for example, if the maximum permitted deviation is 5%, then evaluate `95% * base <= offset <= 105% * base`\\n     */\\n    function isInRange(\\n        Fraction memory baseSample,\\n        Fraction memory offsetSample,\\n        uint32 maxDeviationPPM\\n    ) internal pure returns (bool) {\\n        Uint512 memory min = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION - maxDeviationPPM));\\n        Uint512 memory mid = mul512(baseSample.d, offsetSample.n * PPM_RESOLUTION);\\n        Uint512 memory max = mul512(baseSample.n, offsetSample.d * (PPM_RESOLUTION + maxDeviationPPM));\\n        return lte512(min, mid) && lte512(mid, max);\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` positive representation of an unsigned integer\\n     */\\n    function toPos256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: false });\\n    }\\n\\n    /**\\n     * @dev returns an `Sint256` negative representation of an unsigned integer\\n     */\\n    function toNeg256(uint256 n) internal pure returns (Sint256 memory) {\\n        return Sint256({ value: n, isNeg: true });\\n    }\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        Uint512 memory xy = mul512(x, y);\\n\\n        // if `x * y < 2 ^ 256`\\n        if (xy.hi == 0) {\\n            return xy.lo / z;\\n        }\\n\\n        // assert `x * y / z < 2 ^ 256`\\n        if (xy.hi >= z) {\\n            revert Overflow();\\n        }\\n\\n        uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n        Uint512 memory n = _sub512(xy, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n        // if `n < 2 ^ 256`\\n        if (n.hi == 0) {\\n            return n.lo / z;\\n        }\\n\\n        uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n        uint256 q = _div512(n, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n        uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n        return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n    }\\n\\n    /**\\n     * @dev returns the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        uint256 w = mulDivF(x, y, z);\\n        if (_mulMod(x, y, z) > 0) {\\n            if (w >= type(uint256).max) {\\n                revert Overflow();\\n            }\\n\\n            return w + 1;\\n        }\\n        return w;\\n    }\\n\\n    /**\\n     * @dev returns the maximum of `n1 - n2` and 0\\n     */\\n    function subMax0(uint256 n1, uint256 n2) internal pure returns (uint256) {\\n        return n1 > n2 ? n1 - n2 : 0;\\n    }\\n\\n    /**\\n     * @dev returns the value of `x > y`\\n     */\\n    function gt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi > y.hi || (x.hi == y.hi && x.lo > y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x < y`\\n     */\\n    function lt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x >= y`\\n     */\\n    function gte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !lt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x <= y`\\n     */\\n    function lte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !gt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y) internal pure returns (Uint512 memory) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            return Uint512({ hi: p - q, lo: q });\\n        }\\n        return Uint512({ hi: _unsafeSub(p, q) - 1, lo: q });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`, given that `x >= y`\\n     */\\n    function _sub512(Uint512 memory x, uint256 y) private pure returns (Uint512 memory) {\\n        if (x.lo >= y) {\\n            return Uint512({ hi: x.hi, lo: x.lo - y });\\n        }\\n        return Uint512({ hi: x.hi - 1, lo: _unsafeSub(x.lo, y) });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(Uint512 memory x, uint256 pow2n) private pure returns (uint256) {\\n        uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n        return _unsafeMul(x.hi, pow2nInv) | (x.lo / pow2n); // `(x.hi << (256 - n)) | (x.lo >> n)`\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        for (uint256 i = 0; i < 8; i++) {\\n            x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x1f08d6df1dde75d65ce91b32f0dc2580826e44269eafa01732af22370de6c75d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Time.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev this contract abstracts the block timestamp in order to allow for more flexible control in tests\\n */\\ncontract Time {\\n    /**\\n     * @dev returns the current time\\n     */\\n    function _time() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x806752b6c024f394537f39c91b1fe4f7b197755675f192dc828c26d9cb12ac33\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    error AlreadyInitialized();\\n\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint32 internal constant MAX_GAP = 50;\\n\\n    uint16 internal _initializations;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 1] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        _initializations = 1;\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    function version() public view virtual override returns (uint16);\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    /**\\n     * @dev performs post-upgrade initialization\\n     *\\n     * requirements:\\n     *\\n     * - this must can be called only once per-upgrade\\n     */\\n    function postUpgrade(bytes calldata data) external {\\n        uint16 initializations = _initializations + 1;\\n\\n        if (initializations != version()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        _initializations = initializations;\\n\\n        _postUpgrade(data);\\n    }\\n\\n    /**\\n     * @dev an optional post-upgrade callback that can be implemented by child contracts\\n     */\\n    function _postUpgrade(\\n        bytes calldata /* data */\\n    ) internal virtual {}\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b0aab671a397dc8ad43693da78a4fc877481c5de7b05f01033f49c751836eea\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror AlreadyExists();\\nerror DoesNotExist();\\nerror InvalidAddress();\\nerror InvalidExternalAddress();\\nerror InvalidFee();\\nerror InvalidPool();\\nerror InvalidPoolCollection();\\nerror InvalidStakedBalance();\\nerror InvalidToken();\\nerror InvalidType();\\nerror InvalidParam();\\nerror NotEmpty();\\nerror NotPayable();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\ncontract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        if (addr == address(0) || addr == address(this)) {\\n            revert InvalidExternalAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x549309e904ab38d09f10db101a1fff304414e72e142bfb5f385fbdb4dd34d4a6\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     * - the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address ownerCandidate) external;\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xe6141c9a7cb5853352f35dc83e9504e2c552feadac7c70dd1e029c1b4368b6bb\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0x6019e5e9c706cc023b96313932f5aa7fc3734f446fd0936a2c6530d0d25330da\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x1969c895e9adc0bc8a85e975517d2f2b9357e0c9011f159d01b90f7d1a464d76\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IExternalProtectionVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IExternalProtectionVault is IVault {}\\n\",\"keccak256\":\"0x0ae5812ccd4166ba2df080b90df2ec128806a237d3ce9359ca6bb23025d63d85\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IMasterVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IMasterVault is IVault {}\\n\",\"keccak256\":\"0x875a0f6792439d100fade7ffb778a34d8eac7ededb43b65d0160281d3d5a83f0\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/vaults/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { IUpgradeable } from \\\"../../utility/interfaces/IUpgradeable.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n// the asset manager role is required to access all the funds\\nbytes32 constant ROLE_ASSET_MANAGER = keccak256(\\\"ROLE_ASSET_MANAGER\\\");\\n\\ninterface IVault is IUpgradeable {\\n    /**\\n     * @dev triggered when tokens have been withdrawn from the vault\\n     */\\n    event FundsWithdrawn(Token indexed token, address indexed caller, address indexed target, uint256 amount);\\n\\n    /**\\n     * @dev triggered when tokens have been burned from the vault\\n     */\\n    event FundsBurned(Token indexed token, address indexed caller, uint256 amount);\\n\\n    /**\\n     * @dev tells whether the vault accepts native token deposits\\n     */\\n    function isPayable() external view returns (bool);\\n\\n    /**\\n     * @dev withdraws funds held by the contract and sends them to an account\\n     */\\n    function withdrawFunds(\\n        Token token,\\n        address payable target,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev burns funds held by the contract\\n     */\\n    function burn(Token token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1ac16bcccd209b3a73c00144df2b5c53fbd328434277e72457063c26645872d5\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162006021380380620060218339810160408190526200003591620001df565b8562000041816200019e565b856200004d816200019e565b8562000059816200019e565b8562000065816200019e565b8562000071816200019e565b856200007d816200019e565b6001600160a01b038c1660a081905260408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015620000c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ee919062000273565b6001600160a01b039081166080528b1660e081905260408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa1580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000165919062000273565b6001600160a01b0390811660c052998a16610100525050505093851661012052509083166101405290911661016052506200029a915050565b6001600160a01b038116620001c65760405163e6c4247b60e01b815260040160405180910390fd5b50565b6001600160a01b0381168114620001c657600080fd5b60008060008060008060c08789031215620001f957600080fd5b86516200020681620001c9565b60208801519096506200021981620001c9565b60408801519095506200022c81620001c9565b60608801519094506200023f81620001c9565b60808801519093506200025281620001c9565b60a08801519092506200026581620001c9565b809150509295509295509295565b6000602082840312156200028657600080fd5b81516200029381620001c9565b9392505050565b60805160a05160c05160e05161010051610120516101405161016051615c946200038d6000396000610ad50152600081816137c40152613a71015260008181610eb301528181611b0501528181611c6001528181611c9a015281816130b601528181613735015281816139e201528181614723015261479d0152600081816119a50152611a5801526000505060006128f201526000505060008181610ee00152818161107c0152818161195001528181611cc90152818161268f01528181612e5b01528181612f300152818161324c015281816134ae01528181613df2015281816142e401526143210152615c946000f3fe60806040526004361061028c5760003560e01c80638456cb591161015a578063b992d405116100c1578063d3a4acd31161007a578063d3a4acd3146107dc578063d547741f146107ef578063d6efd7c31461080f578063e597e12d14610824578063e6aac07e14610844578063f6c578611461087757600080fd5b8063b992d40514610709578063c0c53b8b14610729578063c844748714610749578063c997e47e1461077c578063ca15c8731461079c578063cfcb9e3b146107bc57600080fd5b8063a217fddf11610113578063a217fddf1461066c578063a7fb8f1b14610681578063adf51de1146106a1578063b187bd26146106c1578063b3db428b146106d6578063b8350e27146106e957600080fd5b80638456cb591461059c5780638cd2403d146105b15780639010d07c146105d157806391d14854146105f157806393867fb5146106115780639bca0e701461063257600080fd5b80633d1c24e7116101fe57806347e7ef24116101b757806347e7ef24146104cb57806354fd4d50146104de5780635c975abb146104fa57806363f80c1514610513578063673cea69146105335780637bf6a4251461058657600080fd5b80633d1c24e7146104245780633efcfda41461043757806340fbd5fb1461045757806341f435b31461047757806345d6602c1461049857806345f2d040146104ab57600080fd5b80632f2ff15d116102505780632f2ff15d1461036257806333a801aa14610382578063357a0333146103a257806336568abe146103c257806339fadf98146103e25780633cd119241461040457600080fd5b806301ffc9a714610298578063046f7da2146102cd5780631fb6376b146102e4578063248a9ca3146103125780632e1a7d4d1461034257600080fd5b3661029357005b600080fd5b3480156102a457600080fd5b506102b86102b33660046150f1565b610897565b60405190151581526020015b60405180910390f35b3480156102d957600080fd5b506102e26108c2565b005b3480156102f057600080fd5b506103046102ff366004615146565b6108e6565b6040519081526020016102c4565b34801561031e57600080fd5b5061030461032d3660046151b4565b60009081526065602052604090206001015490565b34801561034e57600080fd5b5061030461035d3660046151b4565b61099b565b34801561036e57600080fd5b506102e261037d3660046151cd565b610b40565b34801561038e57600080fd5b5061030461039d3660046151fd565b610b6b565b3480156103ae57600080fd5b506103046103bd366004615288565b610c74565b3480156103ce57600080fd5b506102e26103dd3660046151cd565b610cee565b3480156103ee57600080fd5b506103f7610d6c565b6040516102c491906152b4565b34801561041057600080fd5b5061030461041f366004615301565b610e1e565b6102e261043236600461531e565b610f88565b34801561044357600080fd5b506103046104523660046151b4565b61112a565b34801561046357600080fd5b506102e2610472366004615301565b6111fe565b34801561048357600080fd5b50600080516020615c28833981519152610304565b6103046104a636600461536f565b6112c4565b3480156104b757600080fd5b506103046104c63660046153d6565b611389565b6103046104d9366004615288565b611440565b3480156104ea57600080fd5b50604051600481526020016102c4565b34801561050657600080fd5b5061012d5460ff166102b8565b34801561051f57600080fd5b5061030461052e3660046151fd565b6114ad565b34801561053f57600080fd5b5061056e61054e366004615440565b61ffff16600090815261016460205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102c4565b34801561059257600080fd5b5061016854610304565b3480156105a857600080fd5b506102e26115a3565b3480156105bd57600080fd5b506102e26105cc3660046154a6565b6115c4565b3480156105dd57600080fd5b5061056e6105ec3660046154e8565b611615565b3480156105fd57600080fd5b506102b861060c3660046151cd565b611634565b34801561061d57600080fd5b50600080516020615c68833981519152610304565b34801561063e57600080fd5b5061056e61064d366004615301565b6001600160a01b03908116600090815261016760205260409020541690565b34801561067857600080fd5b50610304600081565b34801561068d57600080fd5b506102e261069c36600461550a565b61165f565b3480156106ad57600080fd5b506102e26106bc366004615538565b6118e5565b3480156106cd57600080fd5b506102b8611e33565b6103046106e43660046155ab565b611e47565b3480156106f557600080fd5b506102e2610704366004615631565b611ebe565b34801561071557600080fd5b506102e2610724366004615667565b61204f565b34801561073557600080fd5b506102e26107443660046156bc565b6120e8565b34801561075557600080fd5b507f657d38169ed9612cb2d9de7040b7b6a1adebf7a8433a66ccb49c08554ac9b8a5610304565b34801561078857600080fd5b506102e2610797366004615301565b6121d0565b3480156107a857600080fd5b506103046107b73660046151b4565b612417565b3480156107c857600080fd5b506103046107d73660046153d6565b61242e565b6103046107ea36600461536f565b6124bc565b3480156107fb57600080fd5b506102e261080a3660046151cd565b612571565b34801561081b57600080fd5b506103f7612597565b34801561083057600080fd5b506102e261083f366004615707565b612642565b34801561085057600080fd5b507fdf8c9529ea4b244b569bac557a549516f317e7b5cf82dc5e0d8b6d874930a3f5610304565b34801561088357600080fd5b506102b8610892366004615301565b61268b565b60006001600160e01b03198216635a05180f60e01b14806108bc57506108bc826126d4565b92915050565b600080516020615c288339815191526108db8133612709565b6108e3612730565b50565b6000876108f2816127c5565b876108fc816127c5565b87610906816127ec565b61012d5460ff16156109335760405162461bcd60e51b815260040161092a90615725565b60405180910390fd5b600260fb54036109555760405162461bcd60e51b815260040161092a9061574f565b600260fb819055506109878b8b8b8b60405180606001604052808d60ff1681526020018c81526020018b81525061280d565b600160fb559b9a5050505050505050505050565b60006109aa61012d5460ff1690565b156109c75760405162461bcd60e51b815260040161092a90615725565b600260fb54036109e95760405162461bcd60e51b815260040161092a9061574f565b600260fb55336000610a4c84836000814260405160609290921b6001600160601b031916602083015260e01b6001600160e01b03191660348201526038810184905260580160405160208183030381529060405280519060200120905092915050565b6101605460405163158591ab60e11b8152600481018390526001600160a01b0385811660248301526044820188905292935060009290911690632b0b2356906064016060604051808303816000875af1158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad191906157d3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681600001516001600160a01b031603610b2557610b1b82848361284b565b9350505050610b36565b610b30828483612a05565b93505050505b600160fb55919050565b600082815260656020526040902060010154610b5c8133612b83565b610b668383612be7565b505050565b6000610b7a61012d5460ff1690565b15610b975760405162461bcd60e51b815260040161092a90615725565b600260fb5403610bb95760405162461bcd60e51b815260040161092a9061574f565b600260fb55610bcb8a8a8a8a8a612c09565b610c0c3330898960405180606001604052808a60ff168152602001898152602001888152508f6001600160a01b0316612c8d9095949392919063ffffffff16565b6040805180820182526001600160a01b03808d1682528b811660208084019190915283516060810185528c81528082018c9052600081860152845180860190955233855291891690840152610c619289612d51565b600160fb559a9950505050505050505050565b600082610c80816127c5565b82610c8a816127ec565b61012d5460ff1615610cae5760405162461bcd60e51b815260040161092a90615725565b600260fb5403610cd05760405162461bcd60e51b815260040161092a9061574f565b600260fb55610ce033868661315a565b600160fb5595945050505050565b6001600160a01b0381163314610d5e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161092a565b610d6882826131f2565b5050565b60606000610d7b610162613214565b905060008167ffffffffffffffff811115610d9857610d98615786565b604051908082528060200260200182016040528015610dc1578160200160208202803683370190505b50905060005b82811015610e1757610ddb6101628261321e565b828281518110610ded57610ded615817565b6001600160a01b039092166020928302919091019091015280610e0f81615843565b915050610dc7565b5092915050565b6000610e2d61012d5460ff1690565b15610e4a5760405162461bcd60e51b815260040161092a90615725565b7f657d38169ed9612cb2d9de7040b7b6a1adebf7a8433a66ccb49c08554ac9b8a5610e758133612709565b82610e7f816127c5565b610168546000819003610e96576000935050610f81565b600061016855604051631c20fadd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631c20fadd90610f0c907f0000000000000000000000000000000000000000000000000000000000000000908990869060040161585c565b600060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b50506040518381526001600160a01b03881692503391507f328c9cc28e75030423307e732b07659ae452a620281f3e54e838000a7f4675389060200160405180910390a392505b5050919050565b61012d5460ff1615610fac5760405162461bcd60e51b815260040161092a90615725565b7fdf8c9529ea4b244b569bac557a549516f317e7b5cf82dc5e0d8b6d874930a3f5610fd78133612709565b600260fb5403610ff95760405162461bcd60e51b815260040161092a9061574f565b600260fb55604080516001600160601b031933606090811b82166020808501919091526001600160e01b03194260e01b1660348501528a821b8316603885015289821b909216604c84015282018790526080820186905260a08083018690528351808403909101815260c090920190925280519101206001600160a01b038088167f000000000000000000000000000000000000000000000000000000000000000091909116036110b9576110b38187873360018861322a565b506110c9565b6110c7818789883389613361565b505b60408051868152602081018690529081018490526001600160a01b03808816919089169083907f102bce4e43a6a8cf0306fde6154221c1f5460f64ba63b92b156bce998ef0db569060600160405180910390a45050600160fb555050505050565b600061113961012d5460ff1690565b156111565760405162461bcd60e51b815260040161092a90615725565b600260fb54036111785760405162461bcd60e51b815260040161092a9061574f565b600260fb5561016054604051635f23b6c560e11b8152336004820152602481018490526001600160a01b039091169063be476d8a906044016020604051808303816000875af11580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190615880565b600160fb5592915050565b80611208816127c5565b611220600080516020615c6883398151915233612709565b600260fb54036112425760405162461bcd60e51b815260040161092a9061574f565b600260fb55611250826133c1565b6112bb826001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b59190615899565b83613400565b5050600160fb55565b60006112d361012d5460ff1690565b156112f05760405162461bcd60e51b815260040161092a90615725565b600260fb54036113125760405162461bcd60e51b815260040161092a9061574f565b600260fb556113248787878787612c09565b6040805180820182526001600160a01b03808a16825288811660208084019190915283516060810185528981528082018990526000818601528451808601909552338552918616908401526113799286612d51565b600160fb55979650505050505050565b600086611395816127c5565b8661139f816127ec565b61012d5460ff16156113c35760405162461bcd60e51b815260040161092a90615725565b600260fb54036113e55760405162461bcd60e51b815260040161092a9061574f565b600260fb556040805160608101825260ff8816815260208101879052908101859052611423906001600160a01b038b1690339030908c908c90612c8d565b61142e338a8a61315a565b600160fb559998505050505050505050565b60008261144c816127c5565b82611456816127ec565b61012d5460ff161561147a5760405162461bcd60e51b815260040161092a90615725565b600260fb540361149c5760405162461bcd60e51b815260040161092a9061574f565b600260fb55610ce033868682613493565b60006114bc61012d5460ff1690565b156114d95760405162461bcd60e51b815260040161092a90615725565b600260fb54036114fb5760405162461bcd60e51b815260040161092a9061574f565b600260fb5561150d8a8a8a8a8a612c09565b61154e33308a8960405180606001604052808a60ff168152602001898152602001888152508f6001600160a01b0316612c8d9095949392919063ffffffff16565b6040805180820182526001600160a01b03808d1682528b811660208084019190915283516060810185528c81528082018c9052600181860152845180860190955233855291891690840152610c619289612d51565b600080516020615c288339815191526115bc8133612709565b6108e36134fc565b60c9546000906115d99061ffff1660016158b6565b905061ffff81166004146115ff5760405162dc149f60e41b815260040160405180910390fd5b60c9805461ffff191661ffff8316179055505050565b600082815260976020526040812061162d908361321e565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b81611669816127c5565b611681600080516020615c6883398151915233612709565b600260fb54036116a35760405162461bcd60e51b815260040161092a9061574f565b600260fb556001600160a01b03808316908416036116d45760405163386c33d760e11b815260040160405180910390fd5b6116dd826133c1565b826001600160a01b031663f525cb686040518163ffffffff1660e01b8152600401602060405180830381865afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f9190615880565b1561175d576040516332e7879360e01b815260040160405180910390fd5b61176961016284613556565b6117865760405163b0ce759160e01b815260040160405180910390fd5b6000836001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea9190615899565b90506001600160a01b0383161561188b576000836001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190615899565b90508061ffff168261ffff16146118895760405163b968846160e01b815260040160405180910390fd5b505b6118958184613400565b6118a084600061356b565b6040516001600160a01b0385169061ffff8316907fa0c1e3924f995e5ba38f53b4effb6d4b3eeb84176a2951c589115140f638ac0990600090a35050600160fb555050565b846118ef816127c5565b846118f9816127ec565b84611903816127c5565b61012d5460ff16156119275760405162461bcd60e51b815260040161092a90615725565b600260fb54036119495760405162461bcd60e51b815260040161092a9061574f565b600260fb557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690891614158015611a12575060405163b5af090f60e01b81526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa1580156119ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1091906158dc565b155b15611a3057604051630b094f2760e31b815260040160405180910390fd5b604051637c36afad60e01b81526001600160a01b038981166004830152600091611ad4918a917f000000000000000000000000000000000000000000000000000000000000000090911690637c36afad90602401602060405180830381865afa158015611aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac591906158fe565b63ffffffff16620f4240613aa2565b90506000611aeb6001600160a01b038b1630613b6e565b604051631c20fadd60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631c20fadd90611b3e908d908c908e9060040161585c565b600060405180830381600087803b158015611b5857600080fd5b505af1158015611b6c573d6000803e3d6000fd5b50505050876001600160a01b03166323e30c8b33611b908d6001600160a01b031690565b8c868c8c6040518763ffffffff1660e01b8152600401611bb596959493929190615924565b600060405180830381600087803b158015611bcf57600080fd5b505af1158015611be3573d6000803e3d6000fd5b50505050600081611c06308d6001600160a01b0316613b6e90919063ffffffff16565b611c109190615980565b9050611c1c838b615997565b811015611c3c5760405163b7ed78bf60e01b815260040160405180910390fd5b611c4e8b6001600160a01b0316613bfc565b15611c8b57611c866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682613c1e565b611cbf565b611cbf6001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000083613d37565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908c1603611d685761015f54604051637c8f622d60e01b81526001600160a01b038d811660048301526024820186905260006044830152909116908190637c8f622d90606401600060405180830381600087803b158015611d4a57600080fd5b505af1158015611d5e573d6000803e3d6000fd5b5050505050611ddb565b6000611d738c613da2565b604051631510748b60e01b81526001600160a01b038e811660048301526024820187905291925090821690631510748b90604401600060405180830381600087803b158015611dc157600080fd5b505af1158015611dd5573d6000803e3d6000fd5b50505050505b604080518b81526020810185905233916001600160a01b038e16917f0da3485ef1bb570df7bb888887eae5aa01d81b83cd8ccc80c0ea0922a677ecef910160405180910390a35050600160fb55505050505050505050565b6000611e4261012d5460ff1690565b905090565b600083611e53816127c5565b83611e5d816127c5565b83611e67816127ec565b61012d5460ff1615611e8b5760405162461bcd60e51b815260040161092a90615725565b600260fb5403611ead5760405162461bcd60e51b815260040161092a9061574f565b600260fb5561137987878733613493565b600260fb5403611ee05760405162461bcd60e51b815260040161092a9061574f565b600260fb558060005b81811015612044576000848483818110611f0557611f05615817565b9050602002016020810190611f1a9190615301565b61016154604051630874327f60e01b81526001600160a01b03808416600483015292935060009290911690630874327f906024016020604051808303816000875af1158015611f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9191906159af565b6001600160a01b038084166000818152610167602052604080822080548587166001600160a01b031982161790915590519495509092169283927f987eb3c2f78454541205f72f34839b434c306c9eaf4922efd7c0c3060fdb2e4c91a3816001600160a01b0316836001600160a01b03167f95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c60405160405180910390a3505050808061203c90615843565b915050611ee9565b5050600160fb555050565b612067600080516020615c6883398151915233612709565b600260fb54036120895760405162461bcd60e51b815260040161092a9061574f565b600260fb558060005b818110156120dc576120ca858585848181106120b0576120b0615817565b90506020020160208101906120c59190615301565b613dde565b806120d481615843565b915050612092565b5050600160fb55505050565b826120f2816127c5565b826120fc816127c5565b82612106816127c5565b600054610100900460ff166121215760005460ff1615612125565b303b155b6121885760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161092a565b600054610100900460ff161580156121aa576000805461ffff19166101011790555b6121b5878787613f8e565b80156121c7576000805461ff00191690555b50505050505050565b806121da816127c5565b6121f2600080516020615c6883398151915233612709565b600260fb54036122145760405162461bcd60e51b815260040161092a9061574f565b600260fb5561222561016283613fd8565b6122425760405163119b4fd360e11b815260040160405180910390fd5b6000826001600160a01b031663b1dd61b66040518163ffffffff1660e01b8152600401602060405180830381865afa158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a69190615899565b61ffff8116600090815261016460205260409020549091506001600160a01b0316801580159061239f5750836001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561230f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123339190615899565b61ffff16816001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123999190615899565b61ffff16145b156123bd5760405163119b4fd360e11b815260040160405180910390fd5b6123c78285613400565b6123d284600161356b565b6040516001600160a01b0385169061ffff8416907f5ae87719d73cb0fabb219f0e4b6e0a614ed7506f8a08bdb20bebf313573151b790600090a35050600160fb555050565b60008181526097602052604081206108bc90613214565b60008661243a816127c5565b86612444816127ec565b61012d5460ff16156124685760405162461bcd60e51b815260040161092a90615725565b600260fb540361248a5760405162461bcd60e51b815260040161092a9061574f565b600260fb8190555061142e338a8a8a60405180606001604052808c60ff1681526020018b81526020018a81525061280d565b60006124cb61012d5460ff1690565b156124e85760405162461bcd60e51b815260040161092a90615725565b600260fb540361250a5760405162461bcd60e51b815260040161092a9061574f565b600260fb5561251c8787878787612c09565b6040805180820182526001600160a01b03808a16825288811660208084019190915283516060810185528981528082018990526001818601528451808601909552338552918616908401526113799286612d51565b60008281526065602052604090206001015461258d8133612b83565b610b6683836131f2565b606060006125a6610165613214565b905060008167ffffffffffffffff8111156125c3576125c3615786565b6040519080825280602002602001820160405280156125ec578160200160208202803683370190505b50905060005b82811015610e17576126066101658261321e565b82828151811061261857612618615817565b6001600160a01b03909216602092830291909101909101528061263a81615843565b9150506125f2565b61265a600080516020615c6883398151915233612709565b600260fb540361267c5760405162461bcd60e51b815260040161092a9061574f565b600260fb556112bb8282613dde565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806108bc57506108bc61016583613fed565b60006001600160e01b03198216637965db0b60e01b14806108bc57506301ffc9a760e01b6001600160e01b03198316146108bc565b6127138282611634565b610d6857604051634ca8886760e01b815260040160405180910390fd5b61012d5460ff1661277a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161092a565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0381166108e35760405163e6c4247b60e01b815260040160405180910390fd5b806000036108e357604051637c946ed760e01b815260040160405180910390fd5b6000336128276001600160a01b0387168230888888612c8d565b6128406128368888888561400f565b888888858a613361565b979650505050505050565b61015f5481516101605460208401516040516323b872dd60e01b81526000946001600160a01b03908116948116936323b872dd93612892939190921691869160040161585c565b6020604051808303816000875af11580156128b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d591906158dc565b5060208301516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd9161292a91889186919060040161585c565b6020604051808303816000875af1158015612949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296d91906158dc565b50602083015160408085015190516372026c6760e11b8152600481018890526001600160a01b038781166024830152604482019390935260648101919091529082169063e404d8ce906084016020604051808303816000875af11580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190615880565b95945050505050565b60008082600001516001600160a01b031663f4325d676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6e91906159af565b90506000612a7b82613da2565b84516101605460208701516040516323b872dd60e01b81529394506001600160a01b03928316936323b872dd93612ab8931691869160040161585c565b6020604051808303816000875af1158015612ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612afb91906158dc565b50602084015160408086015190516356aca36f60e01b81526001600160a01b038416926356aca36f92612b36928b928b9289926004016159cc565b6020604051808303816000875af1158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b799190615880565b9695505050505050565b612b8d8282611634565b610d6857612ba5816001600160a01b03166014614074565b612bb0836020614074565b604051602001612bc1929190615a27565b60408051601f198184030181529082905262461bcd60e51b825261092a91600401615a9c565b612bf18282614210565b6000828152609760205260409020610b669082613fd8565b612c12856127c5565b612c1b846127c5565b836001600160a01b0316856001600160a01b031603612c4d5760405163c1ab6dc160e01b815260040160405180910390fd5b612c56836127ec565b612c5f826127ec565b4263ffffffff16811015612c8657604051631ab7da6b60e01b815260040160405180910390fd5b5050505050565b612c9686613bfc565b15612cb457604051631a4ecdbb60e11b815260040160405180910390fd5b80516020820151604080840151905163d505accf60e01b81526001600160a01b0389811660048301528881166024830152604482018890526064820187905260ff909416608482015260a481019290925260c48201529087169063d505accf9060e401600060405180830381600087803b158015612d3157600080fd5b505af1158015612d45573d6000803e3d6000fd5b50505050505050505050565b60208201516000906001600160a01b0316612d775782516001600160a01b031660208401525b825185516020808801518751888301516040808b0151858b015182516001600160601b031960609a8b1b8116828a01526001600160e01b03194260e01b166034830152988a1b8916603882015295891b8816604c87015288860194909452608080860193909352151560f81b60a085015260a1840189905291861b90941660c1830152805160b581840301815260d5830180835281519185019190912061015584018352600080835260f5850181905261011585018190526101359094018490528251958601835283865293850183905290840182905293830152919087516000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911603612f2157612e9d848a6020015160018b614296565b91508192508160600151905088602001516001600160a01b031689600001516001600160a01b0316857f5c02c2bb2d1d082317eb23916ca27b3e7c294398b60061a2ad54f1c3c018c318856000015186602001518760000151886040015160008f60000151604051612f1496959493929190615acf565b60405180910390a4613080565b60208901516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911603612fe357612f69848a6000015160008b614296565b91508192508160600151905088602001516001600160a01b031689600001516001600160a01b0316857f5c02c2bb2d1d082317eb23916ca27b3e7c294398b60061a2ad54f1c3c018c318856000015186602001518760200151886040015189604001518f60000151604051612f1496959493929190615acf565b612fee848a8a61457e565b6060808201519083015192955090935061300791615997565b905088602001516001600160a01b031689600001516001600160a01b0316857f5c02c2bb2d1d082317eb23916ca27b3e7c294398b60061a2ad54f1c3c018c31886600001518660200151886020015188604001518a604001518f6000015160405161307796959493929190615acf565b60405180910390a45b8851875184516130919291906146de565b6020808a01518882015191840151604051631c20fadd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693631c20fadd936130eb93909260040161585c565b600060405180830381600087803b15801561310557600080fd5b505af1158015613119573d6000803e3d6000fd5b505050508061016860008282546131309190615997565b9091555050604088015161314557815161314b565b81602001515b9450505050505b949350505050565b6101605460009061317a906001600160a01b0385811691879116856147c2565b610160546040516313e7e7d160e11b81526001600160a01b03909116906327cfcfa2906131af9087908790879060040161585c565b6020604051808303816000875af11580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131529190615880565b6131fc828261481a565b6000828152609760205260409020610b669082613556565b60006108bc825490565b600061162d8383614881565b61015f546040516323b872dd60e01b81526000916001600160a01b03908116917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd9061328790889085908b9060040161585c565b6020604051808303816000875af11580156132a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ca91906158dc565b5060405163e06bf20d60e01b8152600481018990526001600160a01b0388811660248301526044820188905285151560648301526084820185905282169063e06bf20d9060a4015b6020604051808303816000875af1158015613331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133559190615880565b98975050505050505050565b600061336e8584846146de565b600061337986613da2565b604051639f5c734b60e01b8152600481018a90526001600160a01b03898116602483015288811660448301526064820188905291925090821690639f5c734b90608401613312565b6001600160a01b038116158015906133e257506133e061016282613fed565b155b156108e35760405163b0ce759160e01b815260040160405180910390fd5b61ffff8216600090815261016460205260409020546001600160a01b03908116908216810361342e57505050565b61ffff83166000818152610164602052604080822080546001600160a01b0319166001600160a01b03878116918217909255915191939085169290917f1c34d22e7a908d21c83b9601fc8e1f2ba435b2e9e15ba4104e882ed826b1cc329190a4505050565b6000806134a28686868661400f565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908616036134ee576134e68187868660008061322a565b915050613152565b612b79818787878789613361565b61012d5460ff16156135205760405162461bcd60e51b815260040161092a90615725565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127a83390565b600061162d836001600160a01b0384166148ab565b81811561381f5761015f54604051632f2ff15d60e01b81527f4cbb5676e6e25e1a3b8a36de10472bcac96f97bd8dd87af6f330881b84739eb860048201526001600160a01b03838116602483015290911690632f2ff15d90604401600060405180830381600087803b1580156135e057600080fd5b505af11580156135f4573d6000803e3d6000fd5b505061015f54604051632f2ff15d60e01b81527f0d0d17bf5382c809d9a3899d6a94e57386dfb2036f0401b94ef3cf6c1a9ab73f60048201526001600160a01b0385811660248301529091169250632f2ff15d9150604401600060405180830381600087803b15801561366657600080fd5b505af115801561367a573d6000803e3d6000fd5b505061015f54604051632f2ff15d60e01b81527fca51b9188e78415f30da725e0d94567b4d65bc6777d4e5d573191e9f55b88a3260048201526001600160a01b0385811660248301529091169250632f2ff15d9150604401600060405180830381600087803b1580156136ec57600080fd5b505af1158015613700573d6000803e3d6000fd5b5050604051632f2ff15d60e01b8152600080516020615c4883398151915260048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250632f2ff15d9150604401600060405180830381600087803b15801561377b57600080fd5b505af115801561378f573d6000803e3d6000fd5b5050604051632f2ff15d60e01b8152600080516020615c4883398151915260048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250632f2ff15d91506044015b600060405180830381600087803b15801561380b57600080fd5b505af11580156121c7573d6000803e3d6000fd5b61015f5460405163d547741f60e01b81527f4cbb5676e6e25e1a3b8a36de10472bcac96f97bd8dd87af6f330881b84739eb860048201526001600160a01b0383811660248301529091169063d547741f90604401600060405180830381600087803b15801561388d57600080fd5b505af11580156138a1573d6000803e3d6000fd5b505061015f5460405163d547741f60e01b81527f0d0d17bf5382c809d9a3899d6a94e57386dfb2036f0401b94ef3cf6c1a9ab73f60048201526001600160a01b038581166024830152909116925063d547741f9150604401600060405180830381600087803b15801561391357600080fd5b505af1158015613927573d6000803e3d6000fd5b505061015f5460405163d547741f60e01b81527fca51b9188e78415f30da725e0d94567b4d65bc6777d4e5d573191e9f55b88a3260048201526001600160a01b038581166024830152909116925063d547741f9150604401600060405180830381600087803b15801561399957600080fd5b505af11580156139ad573d6000803e3d6000fd5b505060405163d547741f60e01b8152600080516020615c4883398151915260048201526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d547741f9150604401600060405180830381600087803b158015613a2857600080fd5b505af1158015613a3c573d6000803e3d6000fd5b505060405163d547741f60e01b8152600080516020615c4883398151915260048201526001600160a01b0384811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d547741f91506044016137f1565b600080613aaf858561499e565b8051909150600003613ad357828160200151613acb9190615b16565b91505061162d565b80518311613af457604051631a93c68960e11b815260040160405180910390fd5b6000613b01868686614a25565b90506000613b0f8383614a40565b8051909150600003613b3557848160200151613b2b9190615b16565b935050505061162d565b6000858103861690613b478383614ac5565b90506000613b5d613b58848a615b16565b614afc565b919091029998505050505050505050565b6000613b7983613bfc565b15613b8f57506001600160a01b038116316108bc565b826040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa158015613bd8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162d9190615880565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b80471015613c6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161092a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613cbb576040519150601f19603f3d011682016040523d82523d6000602084013e613cc0565b606091505b5050905080610b665760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161092a565b80600003613d4457505050565b613d4d83613bfc565b15613d8e576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015613d88573d6000803e3d6000fd5b50505050565b610b666001600160a01b0384168383614b27565b6001600160a01b0380821660009081526101676020526040812054909116806108bc5760405163c1ab6dc160e01b815260040160405180910390fd5b80613de8816127c5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603613e345760405163c1ab6dc160e01b815260040160405180910390fd5b613e4061016583613fd8565b613e5d5760405163119b4fd360e11b815260040160405180910390fd5b61ffff8316600090815261016460205260409020546001600160a01b031680613e995760405163b968846160e01b815260040160405180910390fd5b604051634824fce960e11b81526001600160a01b038481166004830152821690639049f9d290602401600060405180830381600087803b158015613edc57600080fd5b505af1158015613ef0573d6000803e3d6000fd5b505050506001600160a01b038381166000818152610167602052604080822080546001600160a01b0319169486169485179055517f4f2ce4e40f623ca765fc0167a25cb7842ceaafb8d82d3dec26ca0d0e0d2d48969190a3806001600160a01b0316836001600160a01b03167f95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c60405160405180910390a350505050565b600054610100900460ff16613fb55760405162461bcd60e51b815260040161092a90615b38565b613fbd614b57565b613fc5614b90565b613fcd614bbf565b610b66838383614bee565b600061162d836001600160a01b038416614ceb565b6001600160a01b0381166000908152600183016020526040812054151561162d565b604080516001600160601b0319606093841b81166020808401919091526001600160e01b03194260e01b16603484015296841b8116603883015294831b909416604c850152818401929092528151808403909101815260809092019052805191012090565b60606000614083836002615b83565b61408e906002615997565b67ffffffffffffffff8111156140a6576140a6615786565b6040519080825280601f01601f1916602001820160405280156140d0576020820181803683370190505b509050600360fc1b816000815181106140eb576140eb615817565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061411a5761411a615817565b60200101906001600160f81b031916908160001a905350600061413e846002615b83565b614149906001615997565b90505b60018111156141c1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061417d5761417d615817565b1a60f81b82828151811061419357614193615817565b60200101906001600160f81b031916908160001a90535060049490941c936141ba81615ba2565b905061414c565b50831561162d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161092a565b61421a8282611634565b610d685760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556142523390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6142c16040518060800160405280600081526020016000815260200160008152602001600081525090565b600083614314576040518060400160405280866001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681525061435c565b60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001866001600160a01b03168152505b9050600083604001516143fd5761437286613da2565b6001600160a01b031663b7fafb7a8884600001518560200151886000015189602001516040518663ffffffff1660e01b81526004016143b59594939291906159cc565b6060604051808303816000875af11580156143d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f89190615bb9565b61448c565b61440686613da2565b6001600160a01b03166352c8f9908884600001518560200151886000015189602001516040518663ffffffff1660e01b81526004016144499594939291906159cc565b6060604051808303816000875af1158015614468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061448c9190615bb9565b9050846145255761015f54604082015160208301516001600160a01b0390921691637c8f622d9189916144bf9190615980565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260016044820152606401600060405180830381600087803b15801561450c57600080fd5b505af1158015614520573d6000803e3d6000fd5b505050505b60405180608001604052808560400151614540578251614543565b85515b8152602001856040015161455857855161455b565b82515b815260200182602001518152602001826040015181525092505050949350505050565b6145a96040518060800160405280600081526020016000815260200160008152602001600081525090565b6145d46040518060800160405280600081526020016000815260200160008152602001600081525090565b82604001511561465c5782516020808501518651604080516060810182528581526001948101859052908101939093529091600091614617918a91908490614296565b9050600061464d898960200151600160405180606001604052808760200151815260200188815260200160011515815250614296565b9195509093506146d692505050565b825160208085015186820151604080516060810182528581526000199481019490945260009084018190529192614697918a91600190614296565b905060006146cd898960000151600060405180606001604052808760000151815260200188815260200160001515815250614296565b95509093505050505b935093915050565b6146f0836001600160a01b0316613bfc565b1561476e5780341015614716576040516342f7487960e11b815260040160405180910390fd5b6147496001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682613c1e565b80341115610b6657610b6661475e8234615980565b6001600160a01b03841690613c1e565b341561478d576040516342f7487960e11b815260040160405180910390fd5b610b666001600160a01b038416837f000000000000000000000000000000000000000000000000000000000000000084614d3a565b613d88846323b872dd60e01b8585856040516024016147e39392919061585c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614d64565b6148248282611634565b15610d685760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082600001828154811061489857614898615817565b9060005260206000200154905092915050565b600081815260018301602052604081205480156149945760006148cf600183615980565b85549091506000906148e390600190615980565b905081811461494857600086600001828154811061490357614903615817565b906000526020600020015490508087600001848154811061492657614926615817565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061495957614959615bf5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108bc565b60009150506108bc565b604080518082019091526000808252602082015260006149be8484614e36565b90508383028082106149f357604051806040016040528082846149e19190615980565b815260200182815250925050506108bc565b60405180604001604052806001614a0a8585900390565b614a149190615980565b815260200191909152949350505050565b60008180614a3557614a35615b00565b838509949350505050565b604080518082019091526000808252602082015281836020015110614a8d57604051806040016040528084600001518152602001838560200151614a849190615980565b905290506108bc565b604051806040016040528060018560000151614aa99190615980565b8152602001614abc856020015185900390565b90529392505050565b600080614add614ad784808403615b16565b60010190565b9050828460200151614aef9190615b16565b8451820217949350505050565b60006001815b6008811015610e17578382026002038202915080614b1f81615843565b915050614b02565b6040516001600160a01b038316602482015260448101829052610b6690849063a9059cbb60e01b906064016147e3565b600054610100900460ff16614b7e5760405162461bcd60e51b815260040161092a90615b38565b614b86614e45565b614b8e614e6c565b565b600054610100900460ff16614bb75760405162461bcd60e51b815260040161092a90615b38565b614b8e614ed1565b600054610100900460ff16614be65760405162461bcd60e51b815260040161092a90615b38565b614b8e614eff565b600054610100900460ff16614c155760405162461bcd60e51b815260040161092a90615b38565b61015f80546001600160a01b038086166001600160a01b0319928316179092556101608054858416908316179055610161805492841692909116919091179055614c8d7fdf8c9529ea4b244b569bac557a549516f317e7b5cf82dc5e0d8b6d874930a3f5600080516020615c68833981519152614f33565b614cb3600080516020615c28833981519152600080516020615c68833981519152614f33565b610b667f657d38169ed9612cb2d9de7040b7b6a1adebf7a8433a66ccb49c08554ac9b8a5600080516020615c68833981519152614f33565b6000818152600183016020526040812054614d32575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108bc565b5060006108bc565b801580614d4b5750614d4b84613bfc565b613d8857613d886001600160a01b0385168484846147c2565b6000614db9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f7e9092919063ffffffff16565b805190915015610b665780806020019051810190614dd791906158dc565b610b665760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161092a565b60006000198284099392505050565b600054610100900460ff16614b8e5760405162461bcd60e51b815260040161092a90615b38565b600054610100900460ff16614e935760405162461bcd60e51b815260040161092a90615b38565b60c9805461ffff19166001179055614eb9600080516020615c6883398151915280614f33565b614b8e600080516020615c6883398151915233614f8d565b600054610100900460ff16614ef85760405162461bcd60e51b815260040161092a90615b38565b600160fb55565b600054610100900460ff16614f265760405162461bcd60e51b815260040161092a90615b38565b61012d805460ff19169055565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60606131528484600085614f97565b610d688282612be7565b606082471015614ff85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161092a565b6001600160a01b0385163b61504f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092a565b600080866001600160a01b0316858760405161506b9190615c0b565b60006040518083038185875af1925050503d80600081146150a8576040519150601f19603f3d011682016040523d82523d6000602084013e6150ad565b606091505b5091509150612840828286606083156150c757508161162d565b8251156150d75782518084602001fd5b8160405162461bcd60e51b815260040161092a9190615a9c565b60006020828403121561510357600080fd5b81356001600160e01b03198116811461162d57600080fd5b6001600160a01b03811681146108e357600080fd5b803560ff8116811461514157600080fd5b919050565b600080600080600080600060e0888a03121561516157600080fd5b873561516c8161511b565b9650602088013561517c8161511b565b9550604088013594506060880135935061519860808901615130565b925060a0880135915060c0880135905092959891949750929550565b6000602082840312156151c657600080fd5b5035919050565b600080604083850312156151e057600080fd5b8235915060208301356151f28161511b565b809150509250929050565b60008060008060008060008060006101208a8c03121561521c57600080fd5b89356152278161511b565b985060208a01356152378161511b565b975060408a0135965060608a0135955060808a0135945060a08a013561525c8161511b565b935061526a60c08b01615130565b925060e08a013591506101008a013590509295985092959850929598565b6000806040838503121561529b57600080fd5b82356152a68161511b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156152f55783516001600160a01b0316835292840192918401916001016152d0565b50909695505050505050565b60006020828403121561531357600080fd5b813561162d8161511b565b600080600080600060a0868803121561533657600080fd5b85356153418161511b565b945060208601356153518161511b565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c0878903121561538857600080fd5b86356153938161511b565b955060208701356153a38161511b565b945060408701359350606087013592506080870135915060a08701356153c88161511b565b809150509295509295509295565b60008060008060008060c087890312156153ef57600080fd5b86356153fa8161511b565b9550602087013594506040870135935061541660608801615130565b92506080870135915060a087013590509295509295509295565b61ffff811681146108e357600080fd5b60006020828403121561545257600080fd5b813561162d81615430565b60008083601f84011261546f57600080fd5b50813567ffffffffffffffff81111561548757600080fd5b60208301915083602082850101111561549f57600080fd5b9250929050565b600080602083850312156154b957600080fd5b823567ffffffffffffffff8111156154d057600080fd5b6154dc8582860161545d565b90969095509350505050565b600080604083850312156154fb57600080fd5b50508035926020909101359150565b6000806040838503121561551d57600080fd5b82356155288161511b565b915060208301356151f28161511b565b60008060008060006080868803121561555057600080fd5b853561555b8161511b565b94506020860135935060408601356155728161511b565b9250606086013567ffffffffffffffff81111561558e57600080fd5b61559a8882890161545d565b969995985093965092949392505050565b6000806000606084860312156155c057600080fd5b83356155cb8161511b565b925060208401356155db8161511b565b929592945050506040919091013590565b60008083601f8401126155fe57600080fd5b50813567ffffffffffffffff81111561561657600080fd5b6020830191508360208260051b850101111561549f57600080fd5b6000806020838503121561564457600080fd5b823567ffffffffffffffff81111561565b57600080fd5b6154dc858286016155ec565b60008060006040848603121561567c57600080fd5b833561568781615430565b9250602084013567ffffffffffffffff8111156156a357600080fd5b6156af868287016155ec565b9497909650939450505050565b6000806000606084860312156156d157600080fd5b83356156dc8161511b565b925060208401356156ec8161511b565b915060408401356156fc8161511b565b809150509250925092565b6000806040838503121561571a57600080fd5b823561552881615430565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156157cd57634e487b7160e01b600052604160045260246000fd5b60405290565b6000606082840312156157e557600080fd5b6157ed61579c565b82516157f88161511b565b8152602083810151908201526040928301519281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016158555761585561582d565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561589257600080fd5b5051919050565b6000602082840312156158ab57600080fd5b815161162d81615430565b600061ffff8083168185168083038211156158d3576158d361582d565b01949350505050565b6000602082840312156158ee57600080fd5b8151801515811461162d57600080fd5b60006020828403121561591057600080fd5b815163ffffffff8116811461162d57600080fd5b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6000828210156159925761599261582d565b500390565b600082198211156159aa576159aa61582d565b500190565b6000602082840312156159c157600080fd5b815161162d8161511b565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60005b83811015615a165781810151838201526020016159fe565b83811115613d885750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615a5f8160178501602088016159fb565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615a908160288401602088016159fb565b01602801949350505050565b6020815260008251806020840152615abb8160408501602087016159fb565b601f01601f19169190910160400192915050565b95865260208601949094526040850192909252606084015260808301526001600160a01b031660a082015260c00190565b634e487b7160e01b600052601260045260246000fd5b600082615b3357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615615b9d57615b9d61582d565b500290565b600081615bb157615bb161582d565b506000190190565b600060608284031215615bcb57600080fd5b615bd361579c565b8251815260208301516020820152604083015160408201528091505092915050565b634e487b7160e01b600052603160045260246000fd5b60008251615c1d8184602087016159fb565b919091019291505056fef28f409b8cbe6b50c7ca45afe893f01f69626f8a4e33cb480bc1bc2d618c084589ce14d20697a788f57260f7690044299bde7ea88cfb7e43d120a0c031f1ffc12172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096a164736f6c634300080d000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Bancor Network contract",
    "events": {
      "FlashLoanCompleted(address,address,uint256,uint256)": {
        "details": "triggered when a flash-loan is completed"
      },
      "FundsMigrated(bytes32,address,address,uint256,uint256,uint256)": {
        "details": "triggered when funds are migrated"
      },
      "LatestPoolCollectionReplaced(uint16,address,address)": {
        "details": "triggered when the latest pool collection, for a specific type, is replaced"
      },
      "NetworkFeesWithdrawn(address,address,uint256)": {
        "details": "triggered when network fees are withdrawn"
      },
      "PoolAdded(address,address)": {
        "details": "triggered when a new pool is added to a pool collection"
      },
      "PoolCollectionAdded(uint16,address)": {
        "details": "triggered when a new pool collection is added"
      },
      "PoolCollectionRemoved(uint16,address)": {
        "details": "triggered when an existing pool collection is removed"
      },
      "PoolCreated(address,address)": {
        "details": "triggered when a pool is created"
      },
      "PoolRemoved(address,address)": {
        "details": "triggered when a new pool is removed from a pool collection"
      },
      "TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "triggered on a successful trade"
      }
    },
    "kind": "dev",
    "methods": {
      "addPoolCollection(address)": {
        "details": "adds new pool collection to the network requirements: - the caller must be the admin of the contract"
      },
      "cancelWithdrawal(uint256)": {
        "details": "cancels a withdrawal request, and returns the number of pool token amount associated with the withdrawal request requirements: - the caller must have already initiated a withdrawal and received the specified id"
      },
      "collectionByPool(address)": {
        "details": "returns the respective pool collection for the provided pool"
      },
      "constructor": {
        "details": "a \"virtual\" constructor that is only used to set immutable state variables"
      },
      "createPool(uint16,address)": {
        "details": "creates a new pool requirements: - the pool doesn't already exist"
      },
      "createPools(uint16,address[])": {
        "details": "creates new pools requirements: - none of the pools already exists"
      },
      "deposit(address,uint256)": {
        "details": "deposits liquidity for the current provider and returns the respective pool token amount requirements: - the caller must have approved the network to transfer the tokens on its behalf (except for in the   native token case)"
      },
      "depositFor(address,address,uint256)": {
        "details": "deposits liquidity for the specified provider and returns the respective pool token amount requirements: - the caller must have approved the network to transfer the tokens on its behalf (except for in the   native token case)"
      },
      "depositForPermitted(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "deposits liquidity for the specified provider by providing an EIP712 typed signature for an EIP2612 permit request and returns the respective pool token amount requirements: - the caller must have provided a valid and unused EIP712 typed signature"
      },
      "depositPermitted(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "deposits liquidity by providing an EIP712 typed signature for an EIP2612 permit request and returns the respective pool token amount requirements: - the caller must have provided a valid and unused EIP712 typed signature"
      },
      "flashLoan(address,uint256,address,bytes)": {
        "details": "provides a flash-loan requirements: - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initWithdrawal(address,uint256)": {
        "details": "initiates liquidity withdrawal requirements: - the caller must have approved the contract to transfer the pool token amount on its behalf"
      },
      "initWithdrawalPermitted(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "initiates liquidity withdrawal by providing an EIP712 typed signature for an EIP2612 permit request requirements: - the caller must have provided a valid and unused EIP712 typed signature"
      },
      "initialize(address,address,address)": {
        "details": "fully initializes the contract and its parents"
      },
      "isPaused()": {
        "details": "returns whether the network is currently paused"
      },
      "isPoolValid(address)": {
        "details": "returns whether the pool is valid"
      },
      "latestPoolCollection(uint16)": {
        "details": "returns the most recent collection that was added to the pool collections set for a specific type"
      },
      "liquidityPools()": {
        "details": "returns the set of all liquidity pools"
      },
      "migrateLiquidity(address,address,uint256,uint256,uint256)": {
        "details": "deposits liquidity during a migration"
      },
      "migratePools(address[])": {
        "details": "migrates a list of pools between pool collections notes: - invalid or incompatible pools will be skipped gracefully"
      },
      "pause()": {
        "details": "pauses the network requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingNetworkFeeAmount()": {
        "details": "returns the pending network fee amount to be burned by the vortex"
      },
      "poolCollections()": {
        "details": "returns the set of all valid pool collections"
      },
      "postUpgrade(bytes)": {
        "details": "performs post-upgrade initialization requirements: - this must can be called only once per-upgrade"
      },
      "removePoolCollection(address,address)": {
        "details": "removes an existing pool collection from the pool requirements: - the caller must be the admin of the contract"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "resume()": {
        "details": "resumes the network requirements: - the caller must have the ROLE_EMERGENCY_STOPPER privilege"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "roleEmergencyStopper()": {
        "details": "returns the emergency stopper role"
      },
      "roleMigrationManager()": {
        "details": "returns the migration manager role"
      },
      "roleNetworkFeeManager()": {
        "details": "returns the network fee manager role"
      },
      "setLatestPoolCollection(address)": {
        "details": "sets the new latest pool collection for the given type requirements: - the caller must be the admin of the contract"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tradeBySourceAmount(address,address,uint256,uint256,uint256,address)": {
        "details": "performs a trade by providing the input source amount, and returns the trade target amount requirements: - the caller must have approved the network to transfer the source tokens on its behalf (except for in the   native token case)"
      },
      "tradeBySourceAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)": {
        "details": "performs a trade by providing the input source amount and providing an EIP712 typed signature for an EIP2612 permit request, and returns the trade target amount requirements: - the caller must have provided a valid and unused EIP712 typed signature"
      },
      "tradeByTargetAmount(address,address,uint256,uint256,uint256,address)": {
        "details": "performs a trade by providing the output target amount, and returns the trade source amount requirements: - the caller must have approved the network to transfer the source tokens on its behalf (except for in the   native token case)"
      },
      "tradeByTargetAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)": {
        "details": "performs a trade by providing the output target amount and providing an EIP712 typed signature for an EIP2612 permit request and returns the target amount and fee, and returns the trade source amount requirements: - the caller must have provided a valid and unused EIP712 typed signature"
      },
      "withdraw(uint256)": {
        "details": "withdraws liquidity and returns the withdrawn amount requirements: - the provider must have already initiated a withdrawal and received the specified id - the specified withdrawal request is eligible for completion - the provider must have approved the network to transfer vBNT amount on its behalf, when withdrawing BNT liquidity"
      },
      "withdrawNetworkFees(address)": {
        "details": "withdraws pending network fees, and returns the amount of fees withdrawn requirements: - the caller must have the ROLE_NETWORK_FEE_MANAGER privilege"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 644,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 647,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1165,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1412,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)245_storage)"
      },
      {
        "astId": 538,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)"
      },
      {
        "astId": 209,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31877,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_initializations",
        "offset": 0,
        "slot": "201",
        "type": "t_uint16"
      },
      {
        "astId": 31883,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 836,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 880,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 732,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 821,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11740,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_bntPool",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IBNTPool)25244"
      },
      {
        "astId": 11743,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_pendingWithdrawals",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IPendingWithdrawals)18643"
      },
      {
        "astId": 11746,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_poolMigrator",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IPoolMigrator)25609"
      },
      {
        "astId": 11749,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_poolCollections",
        "offset": 0,
        "slot": "354",
        "type": "t_struct(AddressSet)1737_storage"
      },
      {
        "astId": 11754,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_latestPoolCollections",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_uint16,t_contract(IPoolCollection)25587)"
      },
      {
        "astId": 11757,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_liquidityPools",
        "offset": 0,
        "slot": "357",
        "type": "t_struct(AddressSet)1737_storage"
      },
      {
        "astId": 11763,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_collectionByPool",
        "offset": 0,
        "slot": "359",
        "type": "t_mapping(t_contract(Token)29718,t_contract(IPoolCollection)25587)"
      },
      {
        "astId": 11765,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "_pendingNetworkFeeAmount",
        "offset": 0,
        "slot": "360",
        "type": "t_uint256"
      },
      {
        "astId": 11771,
        "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
        "label": "__gap",
        "offset": 0,
        "slot": "361",
        "type": "t_array(t_uint256)40_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)40_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[40]",
        "numberOfBytes": "1280"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBNTPool)25244": {
        "encoding": "inplace",
        "label": "contract IBNTPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPendingWithdrawals)18643": {
        "encoding": "inplace",
        "label": "contract IPendingWithdrawals",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolCollection)25587": {
        "encoding": "inplace",
        "label": "contract IPoolCollection",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolMigrator)25609": {
        "encoding": "inplace",
        "label": "contract IPoolMigrator",
        "numberOfBytes": "20"
      },
      "t_contract(Token)29718": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1737_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1737_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)245_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(Token)29718,t_contract(IPoolCollection)25587)": {
        "encoding": "mapping",
        "key": "t_contract(Token)29718",
        "label": "mapping(contract Token => contract IPoolCollection)",
        "numberOfBytes": "32",
        "value": "t_contract(IPoolCollection)25587"
      },
      "t_mapping(t_uint16,t_contract(IPoolCollection)25587)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => contract IPoolCollection)",
        "numberOfBytes": "32",
        "value": "t_contract(IPoolCollection)25587"
      },
      "t_struct(AddressSet)1737_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1736,
            "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1436_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)245_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 244,
            "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1436_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1431,
            "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1435,
            "contract": "contracts/network/BancorNetwork.sol:BancorNetwork",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}